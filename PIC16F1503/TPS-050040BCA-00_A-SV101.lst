

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Nov 03 11:25:17 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	intentry,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text472,local,class=CODE,delta=2
    13                           	psect	text473,local,class=CODE,delta=2
    14                           	psect	text474,local,class=CODE,delta=2
    15                           	psect	text475,local,class=CODE,delta=2
    16                           	psect	text476,local,class=CODE,delta=2
    17                           	psect	text477,local,class=CODE,delta=2
    18                           	psect	text478,local,class=CODE,delta=2
    19                           	psect	text479,local,class=CODE,delta=2
    20                           	psect	text480,local,class=CODE,delta=2
    21                           	psect	text481,local,class=CODE,delta=2
    22                           	psect	text482,local,class=CODE,delta=2
    23                           	psect	text483,local,class=CODE,delta=2
    24                           	psect	text484,local,class=CODE,delta=2
    25                           	psect	text485,local,class=CODE,delta=2
    26                           	psect	text486,local,class=CODE,delta=2
    27                           	psect	text487,local,class=CODE,delta=2
    28                           	psect	text488,local,class=CODE,delta=2
    29                           	psect	text489,local,class=CODE,delta=2
    30                           	psect	text490,local,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  000A                     	;#
    34                           
    35                           	psect	config
    36  8007  3994               	dw	14740	;#
    37  8008  1DFF               	dw	7679	;#
    38                           
    39                           	psect	intentry
    40  0004                     __pintentry:	
    41  000B                     _INTCON	set	11
    42  000C                     _PORTA	set	12
    43  000E                     _PORTC	set	14
    44  001B                     _PR2	set	27
    45  0018                     _T1CON	set	24
    46  001C                     _T2CON	set	28
    47  0017                     _TMR1H	set	23
    48  0016                     _TMR1L	set	22
    49  001A                     _TMR2	set	26
    50  0060                     _RA0	set	96
    51  0062                     _RA2	set	98
    52  0063                     _RA3	set	99
    53  0064                     _RA4	set	100
    54  0065                     _RA5	set	101
    55  0070                     _RC0	set	112
    56  0073                     _RC3	set	115
    57  0074                     _RC4	set	116
    58  0075                     _RC5	set	117
    59  0088                     _TMR1IF	set	136
    60  00C0                     _TMR1ON	set	192
    61  0089                     _TMR2IF	set	137
    62  00E2                     _TMR2ON	set	226
    63  009D                     _ADCON0	set	157
    64  009D                     _ADCON0bits	set	157
    65  009E                     _ADCON1	set	158
    66  009C                     _ADRESH	set	156
    67  009B                     _ADRESL	set	155
    68  0099                     _OSCCON	set	153
    69  008C                     _TRISA	set	140
    70  008E                     _TRISC	set	142
    71  0488                     _TMR1IE	set	1160
    72  0473                     _TRISC3	set	1139
    73  0475                     _TRISC5	set	1141
    74  018C                     _ANSELA	set	396
    75  018E                     _ANSELC	set	398
    76  0197                     _VREGCON	set	407
    77  0C60                     _ANSA0	set	3168
    78  0C61                     _ANSA1	set	3169
    79  0C71                     _ANSC1	set	3185
    80  0C72                     _ANSC2	set	3186
    81  0393                     _IOCAF	set	915
    82  0392                     _IOCAN	set	914
    83  0391                     _IOCAP	set	913
    84  0613                     _PWM1CON	set	1555
    85  0612                     _PWM1DCH	set	1554
    86  0611                     _PWM1DCL	set	1553
    87  0616                     _PWM2CON	set	1558
    88  0615                     _PWM2DCH	set	1557
    89  0614                     _PWM2DCL	set	1556
    90                           
    91 ;; =============== function _delay ends ============
    92 ;; *************** function _itr *****************
    93 ;; Defined at:
    94 ;;		line 89 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\Register.c"
    95 ;; Parameters:    Size  Location     Type
    96 ;;		None
    97 ;; Auto vars:     Size  Location     Type
    98 ;;		None
    99 ;; Return value:  Size  Location     Type
   100 ;;		None               void
   101 ;; Registers used:
   102 ;;		wreg, status,2, status,0
   103 ;; Tracked objects:
   104 ;;		On entry : 0/0
   105 ;;		On exit  : 1E/0
   106 ;;		Unchanged: FFFE0/0
   107 ;; Data sizes:     COMMON   BANK0   BANK1
   108 ;;      Params:         0       0       0
   109 ;;      Locals:         0       0       0
   110 ;;      Temps:          0       0       0
   111 ;;      Totals:         0       0       0
   112 ;;Total ram usage:        0 bytes
   113 ;; Hardware stack levels used:    1
   114 ;; This function calls:
   115 ;;		Nothing
   116 ;; This function is called by:
   117 ;;		Interrupt level 1
   118 ;; This function uses a non-reentrant model
   119 ;;
   120  0004                     _itr:	
   121                           
   122                           ; Regs used in _itr: [wreg+status,2+status,0]
   123  0004  3180               	pagesel	$
   124                           
   125                           ;Register.c: 90: if(TMR1IE&&TMR1IF)
   126  0005  0021               	movlb	1	; select bank1
   127  0006  1C11               	btfss	17,0
   128  0007  0009               	retfie
   129  0008  0020               	movlb	0	; select bank0
   130  0009  1C11               	btfss	17,0
   131  000A  0009               	retfie
   132                           
   133                           ;Register.c: 91: {
   134                           ;Register.c: 92: TMR1IF = 0;
   135  000B  1011               	bcf	17,0
   136                           
   137                           ;Register.c: 93: TMR1L = (char)Cnt.Reload;
   138  000C  0854               	movf	_Cnt+14,w
   139  000D  0096               	movwf	22	;volatile
   140                           
   141                           ;Register.c: 94: TMR1H = (char)(Cnt.Reload>>8);
   142  000E  0855               	movf	_Cnt+15,w
   143  000F  0097               	movwf	23	;volatile
   144                           
   145                           ;Register.c: 96: if((run.press_bit==0)&&(++Cnt.Count>=2500))
   146  0010  1963               	btfsc	_run+1,2
   147  0011  281F               	goto	i1l7703
   148  0012  0AD6               	incf	_Cnt+16,f
   149  0013  1903               	skipnz
   150  0014  0AD7               	incf	_Cnt+17,f
   151  0015  3009               	movlw	9
   152  0016  0257               	subwf	_Cnt+17,w
   153  0017  30C4               	movlw	196
   154  0018  1903               	skipnz
   155  0019  0256               	subwf	_Cnt+16,w
   156  001A  1C03               	skipc
   157  001B  281F               	goto	i1l7703
   158                           
   159                           ;Register.c: 97: {
   160                           ;Register.c: 98: run.sleep_bit = 1;
   161  001C  15E3               	bsf	_run+1,3
   162                           
   163                           ;Register.c: 99: Cnt.Count = 0;
   164  001D  01D6               	clrf	_Cnt+16
   165  001E  01D7               	clrf	_Cnt+17
   166  001F                     i1l7703:	
   167                           
   168                           ;Register.c: 100: }
   169                           ;Register.c: 101: if(!run.smoke_bit&&++Cnt.DelayTime > 450)
   170  001F  1A62               	btfsc	_run,4
   171  0020  282E               	goto	i1l7709
   172  0021  0AC6               	incf	_Cnt,f
   173  0022  1903               	skipnz
   174  0023  0AC7               	incf	_Cnt+1,f
   175  0024  3001               	movlw	1
   176  0025  0247               	subwf	_Cnt+1,w
   177  0026  30C3               	movlw	195
   178  0027  1903               	skipnz
   179  0028  0246               	subwf	_Cnt,w
   180  0029  1C03               	skipc
   181  002A  282E               	goto	i1l7709
   182                           
   183                           ;Register.c: 102: {
   184                           ;Register.c: 103: Cnt.DelayTime = 0;
   185  002B  01C6               	clrf	_Cnt
   186  002C  01C7               	clrf	_Cnt+1
   187                           
   188                           ;Register.c: 104: Cnt.keydn = 0;
   189  002D  01CC               	clrf	_Cnt+6
   190  002E                     i1l7709:	
   191                           
   192                           ;Register.c: 105: }
   193                           ;Register.c: 109: if(run.smoke_bit&&++Cnt.temp2>=12000)
   194  002E  1E62               	btfss	_run,4
   195  002F  2840               	goto	i1l6374
   196  0030  0AD2               	incf	_Cnt+12,f
   197  0031  1903               	skipnz
   198  0032  0AD3               	incf	_Cnt+13,f
   199  0033  302E               	movlw	46
   200  0034  0253               	subwf	_Cnt+13,w
   201  0035  30E0               	movlw	224
   202  0036  1903               	skipnz
   203  0037  0252               	subwf	_Cnt+12,w
   204  0038  1C03               	skipc
   205  0039  2840               	goto	i1l6374
   206                           
   207                           ;Register.c: 110: {
   208                           ;Register.c: 111: run.warn_bit = 1;
   209  003A  15E2               	bsf	_run,3
   210                           
   211                           ;Register.c: 112: Cnt.warn = 1;
   212  003B  01CB               	clrf	_Cnt+5
   213  003C  0ACB               	incf	_Cnt+5,f
   214  003D                     i1l7715:	
   215                           
   216                           ;Register.c: 113: Cnt.temp2 = 0;
   217  003D  01D2               	clrf	_Cnt+12
   218  003E  01D3               	clrf	_Cnt+13
   219                           
   220                           ;Register.c: 114: }
   221  003F  2842               	goto	i1l7719
   222  0040                     i1l6374:	
   223                           
   224                           ;Register.c: 115: else if(!run.press_bit)
   225  0040  1D63               	btfss	_run+1,2
   226  0041  283D               	goto	i1l7715
   227  0042                     i1l7719:	
   228                           
   229                           ;Register.c: 118: }
   230                           ;Register.c: 121: if(run.key&&(++Cnt.LEDtemp > 35))
   231  0042  1F62               	btfss	_run,6
   232  0043  2851               	goto	i1l6377
   233  0044  3024               	movlw	36
   234  0045  0AC9               	incf	_Cnt+3,f
   235  0046  0249               	subwf	_Cnt+3,w
   236  0047  1C03               	skipc
   237  0048  2851               	goto	i1l6377
   238                           
   239                           ;Register.c: 122: {
   240                           ;Register.c: 123: if( Cnt.value_led < 50)
   241  0049  3032               	movlw	50
   242  004A  024A               	subwf	_Cnt+4,w
   243  004B  1803               	skipnc
   244  004C  284F               	goto	i1l6378
   245                           
   246                           ;Register.c: 124: {
   247                           ;Register.c: 125: Cnt.value_led ++;
   248  004D  0ACA               	incf	_Cnt+4,f
   249                           
   250                           ;Register.c: 126: }
   251  004E  285E               	goto	i1l7727
   252  004F                     i1l6378:	
   253                           
   254                           ;Register.c: 127: else
   255                           ;Register.c: 128: run.show_bit = 0;
   256  004F  10E2               	bcf	_run,1
   257                           
   258                           ;Register.c: 130: }
   259  0050  285E               	goto	i1l7727
   260  0051                     i1l6377:	
   261                           
   262                           ;Register.c: 131: else
   263                           ;Register.c: 132: if(!run.smoke_bit&&(++Cnt.LEDtemp > 15))
   264  0051  1A62               	btfsc	_run,4
   265  0052  285F               	goto	i1l7737
   266  0053  3010               	movlw	16
   267  0054  0AC9               	incf	_Cnt+3,f
   268  0055  0249               	subwf	_Cnt+3,w
   269  0056  1C03               	skipc
   270  0057  285F               	goto	i1l7737
   271                           
   272                           ;Register.c: 133: {
   273                           ;Register.c: 134: if( Cnt.value_led > 0)
   274  0058  084A               	movf	_Cnt+4,w
   275  0059  1903               	btfsc	3,2
   276  005A  285D               	goto	i1l6382
   277                           
   278                           ;Register.c: 135: {
   279                           ;Register.c: 136: Cnt.value_led --;
   280  005B  03CA               	decf	_Cnt+4,f
   281                           
   282                           ;Register.c: 137: }
   283  005C  285E               	goto	i1l7727
   284  005D                     i1l6382:	
   285                           
   286                           ;Register.c: 138: else
   287                           ;Register.c: 139: run.close_bit = 0;
   288  005D  1062               	bcf	_run,0
   289  005E                     i1l7727:	
   290                           
   291                           ;Register.c: 129: Cnt.LEDtemp = 0;
   292  005E  01C9               	clrf	_Cnt+3
   293  005F                     i1l7737:	
   294                           
   295                           ;Register.c: 141: }
   296                           ;Register.c: 143: if(run.power_bit&&!run.warn_bit&&!run.poweroff_bit)
   297  005F  18E3               	btfsc	_run+1,1
   298  0060  19E2               	btfsc	_run,3
   299  0061  2878               	goto	i1l6384
   300  0062  1BE2               	btfsc	_run,7
   301  0063  2878               	goto	i1l6384
   302  0064  300F               	movlw	15
   303                           
   304                           ;Register.c: 144: {
   305                           ;Register.c: 145: Cnt.LEDcount ++ ;
   306  0065  0AC8               	incf	_Cnt+2,f
   307                           
   308                           ;Register.c: 146: if( Cnt.LEDcount>= 15)
   309  0066  0248               	subwf	_Cnt+2,w
   310  0067  1C03               	skipc
   311  0068  286B               	goto	i1l7749
   312                           
   313                           ;Register.c: 147: Cnt.LEDcount = 1;
   314  0069  01C8               	clrf	_Cnt+2
   315  006A  0AC8               	incf	_Cnt+2,f
   316  006B                     i1l7749:	
   317                           
   318                           ;Register.c: 148: if( Cnt.LEDcount < Cnt.value_led)
   319  006B  084A               	movf	_Cnt+4,w
   320  006C  0248               	subwf	_Cnt+2,w
   321  006D  1803               	skipnc
   322  006E  2876               	goto	i1l6386
   323                           
   324                           ;Register.c: 149: {
   325                           ;Register.c: 150: if(run.LEDB_bit)
   326  006F  1D62               	btfss	_run,2
   327  0070  2874               	goto	i1l6387
   328                           
   329                           ;Register.c: 151: {
   330                           ;Register.c: 152: RA4 = 0;
   331  0071  120C               	bcf	12,4
   332                           
   333                           ;Register.c: 153: RA5 = 1;
   334  0072  168C               	bsf	12,5
   335                           
   336                           ;Register.c: 154: }
   337  0073  2878               	goto	i1l6384
   338  0074                     i1l6387:	
   339                           
   340                           ;Register.c: 155: else
   341                           ;Register.c: 156: {
   342                           ;Register.c: 157: RA4 = 1;
   343  0074  160C               	bsf	12,4
   344  0075  2877               	goto	L1
   345  0076                     i1l6386:	
   346                           ;Register.c: 158: RA5 = 0;
   347                           
   348                           
   349                           ;Register.c: 161: else
   350                           ;Register.c: 162: {
   351                           ;Register.c: 163: RA4 = 0;
   352  0076  120C               	bcf	12,4
   353  0077                     L1:	
   354                           
   355                           ;Register.c: 164: RA5 = 0;
   356  0077  128C               	bcf	12,5
   357  0078                     i1l6384:	
   358                           
   359                           ;Register.c: 165: }
   360                           ;Register.c: 166: }
   361                           ;Register.c: 174: if(run.sec_bit&&++Cnt.ChgCount>=2000)
   362  0078  1EE3               	btfss	_run+1,5
   363  0079  2887               	goto	i1l7761
   364  007A  0AD8               	incf	_Cnt+18,f
   365  007B  1903               	skipnz
   366  007C  0AD9               	incf	_Cnt+19,f
   367  007D  3007               	movlw	7
   368  007E  0259               	subwf	_Cnt+19,w
   369  007F  30D0               	movlw	208
   370  0080  1903               	skipnz
   371  0081  0258               	subwf	_Cnt+18,w
   372  0082  1C03               	skipc
   373  0083  2887               	goto	i1l7761
   374                           
   375                           ;Register.c: 175: {
   376                           ;Register.c: 176: Cnt.ChgCount = 0;
   377  0084  01D8               	clrf	_Cnt+18
   378  0085  01D9               	clrf	_Cnt+19
   379                           
   380                           ;Register.c: 177: run.finish_bit = 1;
   381  0086  17E3               	bsf	_run+1,7
   382  0087                     i1l7761:	
   383                           
   384                           ;Register.c: 178: }
   385                           ;Register.c: 179: if(run.finish1_bit&&++Cnt.Chgdelay1>=1500)
   386  0087  1D64               	btfss	_run+2,2
   387  0088  0009               	retfie
   388  0089  0ADE               	incf	_Cnt+24,f
   389  008A  1903               	skipnz
   390  008B  0ADF               	incf	_Cnt+25,f
   391  008C  3005               	movlw	5
   392  008D  025F               	subwf	_Cnt+25,w
   393  008E  30DC               	movlw	220
   394  008F  1903               	skipnz
   395  0090  025E               	subwf	_Cnt+24,w
   396  0091  1C03               	skipc
   397  0092  0009               	retfie
   398                           
   399                           ;Register.c: 180: {
   400                           ;Register.c: 181: run.finish1_bit = 0;
   401  0093  1164               	bcf	_run+2,2
   402                           
   403                           ;Register.c: 182: Cnt.Chgdelay1 = 0;
   404  0094  01DE               	clrf	_Cnt+24
   405  0095  01DF               	clrf	_Cnt+25
   406  0096  0009               	retfie
   407  0097                     __end_of_itr:	
   408                           
   409 ;; =============== function _itr ends ============
   410  007E                     btemp	set	126	;btemp
   411  007E                     wtemp0	set	126
   412                           
   413                           	psect	cinit
   414  04CC                     start_initialization:	
   415                           
   416                           ; Clear objects allocated to BANK0
   417  04CC  3046               	movlw	low __pbssBANK0
   418  04CD  0084               	movwf	4
   419  04CE  3000               	movlw	high __pbssBANK0
   420  04CF  0085               	movwf	5
   421  04D0  3022               	movlw	34
   422  04D1  24D4               	fcall	clear_ram
   423  04D2                     end_of_initialization:	
   424                           ;End of C runtime variable initialization code
   425                           
   426  04D2  0020               	movlb	0
   427  04D3  2CC2               	ljmp	_main	;jump to C main() function
   428                           
   429                           	psect	bssBANK0
   430  0046                     __pbssBANK0:	
   431  0046                     _Cnt:	
   432  0046                     	ds	28
   433  0062                     _run:	
   434  0062                     	ds	4
   435  0066                     _TempVAD:	
   436  0066                     	ds	2
   437                           
   438                           	psect	clrtext
   439  04D4                     clear_ram:	
   440                           ;	Called with FSR0 containing the base address, and
   441                           ;	WREG with the size to clear
   442                           
   443  04D4  0064               	clrwdt	;clear the watchdog before getting into this loop
   444  04D5                     clrloop:	
   445  04D5  0180               	clrf	0	;clear RAM location pointed to by FSR
   446  04D6  3101               	addfsr 0,1
   447  04D7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   448  04D8  2CD5               	goto	clrloop	;have we reached the end yet?
   449  04D9  3400               	retlw	0	;all done for this memory range, return
   450                           
   451                           	psect	cstackCOMMON
   452  0070                     __pcstackCOMMON:	
   453  0070                     ?_Variates:	
   454  0070                     ??_Variates:	
   455                           ; 0 bytes @ 0x0
   456                           
   457  0070                     ?_Init:	
   458                           ; 0 bytes @ 0x0
   459                           
   460  0070                     ??_Init:	
   461                           ; 0 bytes @ 0x0
   462                           
   463  0070                     ?_powerInit_deal:	
   464                           ; 0 bytes @ 0x0
   465                           
   466  0070                     ?_sleep_deal:	
   467                           ; 0 bytes @ 0x0
   468                           
   469  0070                     ??_sleep_deal:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0070                     ?_key_deal:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0070                     ?_smoke_deal:	
   476                           ; 0 bytes @ 0x0
   477                           
   478  0070                     ?_warn_deal:	
   479                           ; 0 bytes @ 0x0
   480                           
   481  0070                     ?_charge_deal:	
   482                           ; 0 bytes @ 0x0
   483                           
   484  0070                     ?_power:	
   485                           ; 0 bytes @ 0x0
   486                           
   487  0070                     ?_BTpower:	
   488                           ; 0 bytes @ 0x0
   489                           
   490  0070                     ?_USBPWM:	
   491                           ; 0 bytes @ 0x0
   492                           
   493  0070                     ??_USBPWM:	
   494                           ; 0 bytes @ 0x0
   495                           
   496  0070                     ?_HOTPWM:	
   497                           ; 0 bytes @ 0x0
   498                           
   499  0070                     ??_HOTPWM:	
   500                           ; 0 bytes @ 0x0
   501                           
   502  0070                     ?_delay:	
   503                           ; 0 bytes @ 0x0
   504                           
   505  0070                     ?_main:	
   506                           ; 0 bytes @ 0x0
   507                           
   508  0070                     ?_itr:	
   509                           ; 0 bytes @ 0x0
   510                           
   511  0070                     ??_itr:	
   512                           ; 0 bytes @ 0x0
   513                           
   514  0070                     ?_GetAD:	
   515                           ; 0 bytes @ 0x0
   516                           
   517  0070                     ?___aldiv:	
   518                           ; 2 bytes @ 0x0
   519                           
   520  0070                     delay@nms:	
   521                           ; 4 bytes @ 0x0
   522                           
   523  0070                     ___aldiv@divisor:	
   524                           ; 2 bytes @ 0x0
   525                           
   526                           
   527                           ; 4 bytes @ 0x0
   528  0070                     	ds	2
   529  0072                     ??_GetAD:	
   530  0072                     ??_delay:	
   531                           ; 0 bytes @ 0x2
   532                           
   533  0072                     delay@i:	
   534                           ; 0 bytes @ 0x2
   535                           
   536                           
   537                           ; 2 bytes @ 0x2
   538  0072                     	ds	2
   539  0074                     delay@t:	
   540  0074                     ___aldiv@dividend:	
   541                           ; 1 bytes @ 0x4
   542                           
   543                           
   544                           ; 4 bytes @ 0x4
   545  0074                     	ds	1
   546  0075                     ??_powerInit_deal:	
   547  0075                     ??_warn_deal:	
   548                           ; 0 bytes @ 0x5
   549                           
   550  0075                     ??_power:	
   551                           ; 0 bytes @ 0x5
   552                           
   553  0075                     powerInit_deal@i:	
   554                           ; 0 bytes @ 0x5
   555                           
   556  0075                     power@i:	
   557                           ; 1 bytes @ 0x5
   558                           
   559  0075                     warn_deal@i:	
   560                           ; 1 bytes @ 0x5
   561                           
   562                           
   563                           ; 1 bytes @ 0x5
   564  0075                     	ds	1
   565  0076                     ??_key_deal:	
   566  0076                     ?_GetHotV:	
   567                           ; 0 bytes @ 0x6
   568                           
   569  0076                     ?_GetIsense:	
   570                           ; 2 bytes @ 0x6
   571                           
   572  0076                     warn_deal@num:	
   573                           ; 2 bytes @ 0x6
   574                           
   575                           
   576                           ; 1 bytes @ 0x6
   577  0076                     	ds	2
   578  0078                     ??_GetHotV:	
   579  0078                     ??_GetIsense:	
   580                           ; 0 bytes @ 0x8
   581                           
   582  0078                     ??___aldiv:	
   583                           ; 0 bytes @ 0x8
   584                           
   585  0078                     ___aldiv@counter:	
   586                           ; 0 bytes @ 0x8
   587                           
   588  0078                     GetHotV@H:	
   589                           ; 1 bytes @ 0x8
   590                           
   591  0078                     GetIsense@I:	
   592                           ; 2 bytes @ 0x8
   593                           
   594                           
   595                           ; 2 bytes @ 0x8
   596  0078                     	ds	1
   597  0079                     ___aldiv@sign:	
   598                           
   599                           ; 1 bytes @ 0x9
   600  0079                     	ds	1
   601  007A                     ___aldiv@quotient:	
   602                           
   603                           ; 4 bytes @ 0xA
   604  007A                     	ds	4
   605  007E                     ??_smoke_deal:	
   606  007E                     ??_charge_deal:	
   607                           ; 0 bytes @ 0xE
   608                           
   609  007E                     ??_BTpower:	
   610                           ; 0 bytes @ 0xE
   611                           
   612  007E                     ??_GetBT:	
   613                           ; 0 bytes @ 0xE
   614                           
   615  007E                     ??_GetUsbI:	
   616                           ; 0 bytes @ 0xE
   617                           
   618  007E                     ??_main:	
   619                           ; 0 bytes @ 0xE
   620                           
   621                           
   622                           	psect	cstackBANK0
   623  0020                     __pcstackBANK0:	
   624                           ; 0 bytes @ 0xE
   625                           
   626  0020                     GetAD@SumBuf:	
   627                           
   628                           ; 16 bytes @ 0x0
   629  0020                     	ds	16
   630  0030                     GetAD@SumADC:	
   631                           
   632                           ; 2 bytes @ 0x10
   633  0030                     	ds	2
   634  0032                     GetAD@t:	
   635                           
   636                           ; 1 bytes @ 0x12
   637  0032                     	ds	1
   638  0033                     GetAD@i:	
   639                           
   640                           ; 1 bytes @ 0x13
   641  0033                     	ds	1
   642  0034                     ?_GetBT:	
   643                           
   644                           ; 2 bytes @ 0x14
   645  0034                     	ds	2
   646  0036                     GetBT@BT:	
   647                           
   648                           ; 2 bytes @ 0x16
   649  0036                     	ds	2
   650  0038                     ?_GetUsbI:	
   651                           
   652                           ; 2 bytes @ 0x18
   653  0038                     	ds	2
   654  003A                     GetUsbI@BT:	
   655                           
   656                           ; 2 bytes @ 0x1A
   657  003A                     	ds	2
   658  003C                     GetUsbI@V:	
   659                           
   660                           ; 2 bytes @ 0x1C
   661  003C                     	ds	2
   662  003E                     GetUsbI@I:	
   663                           
   664                           ; 2 bytes @ 0x1E
   665  003E                     	ds	2
   666  0040                     charge_deal@BT:	
   667                           
   668                           ; 2 bytes @ 0x20
   669  0040                     	ds	2
   670  0042                     charge_deal@I:	
   671                           
   672                           ; 2 bytes @ 0x22
   673  0042                     	ds	2
   674  0044                     charge_deal@i:	
   675                           
   676                           ; 1 bytes @ 0x24
   677  0044                     	ds	1
   678  0045                     charge_deal@i_5379:	
   679                           
   680                           ; 1 bytes @ 0x25
   681  0045                     	ds	1
   682                           
   683                           	psect	maintext
   684  04C2                     __pmaintext:	
   685 ;;Data sizes: Strings 0, constant 0, data 0, bss 34, persistent 0 stack 0
   686 ;;Auto spaces:   Size  Autos    Used
   687 ;; COMMON          14     14      14
   688 ;; BANK0           80     38      72
   689 ;; BANK1           32      0       0
   690 ;;
   691 ;; Pointer list with targets:
   692 ;; ?_GetUsbI	unsigned int  size(1) Largest target is 0
   693 ;;
   694 ;; ?_GetIsense	unsigned int  size(1) Largest target is 0
   695 ;;
   696 ;; ?_GetBT	unsigned int  size(1) Largest target is 2
   697 ;;		 -> GetBT@BT(BANK0[2]), 
   698 ;;
   699 ;; ?___aldiv	long  size(1) Largest target is 0
   700 ;;
   701 ;; ?_GetHotV	unsigned int  size(1) Largest target is 0
   702 ;;
   703 ;; ?_GetAD	unsigned int  size(1) Largest target is 0
   704 ;;
   705 ;;
   706 ;; Critical Paths under _main in COMMON
   707 ;;
   708 ;;   _key_deal->_power
   709 ;;   _GetIsense->_GetAD
   710 ;;   _GetBT->___aldiv
   711 ;;   _GetHotV->_GetAD
   712 ;;   _power->_delay
   713 ;;   _warn_deal->_delay
   714 ;;   _powerInit_deal->_delay
   715 ;;
   716 ;; Critical Paths under _itr in COMMON
   717 ;;
   718 ;;   None.
   719 ;;
   720 ;; Critical Paths under _main in BANK0
   721 ;;
   722 ;;   _main->_charge_deal
   723 ;;   _charge_deal->_GetUsbI
   724 ;;   _BTpower->_GetBT
   725 ;;   _GetUsbI->_GetBT
   726 ;;   _GetIsense->_GetAD
   727 ;;   _GetBT->_GetAD
   728 ;;   _GetHotV->_GetAD
   729 ;;
   730 ;; Critical Paths under _itr in BANK0
   731 ;;
   732 ;;   None.
   733 ;;
   734 ;; Critical Paths under _main in BANK1
   735 ;;
   736 ;;   None.
   737 ;;
   738 ;; Critical Paths under _itr in BANK1
   739 ;;
   740 ;;   None.
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   743 ;;
   744 ;;
   745 ;;Call Graph Tables:
   746 ;;
   747 ;; ---------------------------------------------------------------------------------
   748 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   749 ;; ---------------------------------------------------------------------------------
   750 ;; (0) _main                                                 0     0      0    5558
   751 ;;                           _Variates
   752 ;;                               _Init
   753 ;;                     _powerInit_deal
   754 ;;                         _sleep_deal
   755 ;;                           _key_deal
   756 ;;                         _smoke_deal
   757 ;;                          _warn_deal
   758 ;;                        _charge_deal
   759 ;; ---------------------------------------------------------------------------------
   760 ;; (1) _charge_deal                                          6     6      0    3432
   761 ;;                                             32 BANK0      6     6      0
   762 ;;                             _USBPWM
   763 ;;                             _HOTPWM
   764 ;;                              _delay
   765 ;;                              _GetBT
   766 ;;                            _GetUsbI
   767 ;;                          _GetIsense
   768 ;; ---------------------------------------------------------------------------------
   769 ;; (1) _smoke_deal                                           0     0      0    1658
   770 ;;                            _BTpower
   771 ;;                              _delay
   772 ;;                            _GetHotV
   773 ;; ---------------------------------------------------------------------------------
   774 ;; (2) _BTpower                                              0     0      0     944
   775 ;;                              _GetBT
   776 ;; ---------------------------------------------------------------------------------
   777 ;; (2) _GetUsbI                                              8     6      2    1613
   778 ;;                                             24 BANK0      8     6      2
   779 ;;                              _GetBT
   780 ;;                              _GetAD
   781 ;; ---------------------------------------------------------------------------------
   782 ;; (1) _key_deal                                             0     0      0     186
   783 ;;                              _power
   784 ;; ---------------------------------------------------------------------------------
   785 ;; (2) _GetIsense                                            4     2      2     621
   786 ;;                                              6 COMMON     4     2      2
   787 ;;                              _GetAD
   788 ;; ---------------------------------------------------------------------------------
   789 ;; (3) _GetBT                                                4     2      2     944
   790 ;;                                             20 BANK0      4     2      2
   791 ;;                              _GetAD
   792 ;;                            ___aldiv
   793 ;; ---------------------------------------------------------------------------------
   794 ;; (2) _GetHotV                                              4     2      2     621
   795 ;;                                              6 COMMON     4     2      2
   796 ;;                              _GetAD
   797 ;; ---------------------------------------------------------------------------------
   798 ;; (2) _power                                                1     1      0     186
   799 ;;                                              5 COMMON     1     1      0
   800 ;;                              _delay
   801 ;; ---------------------------------------------------------------------------------
   802 ;; (1) _warn_deal                                            2     2      0     142
   803 ;;                                              5 COMMON     2     2      0
   804 ;;                              _delay
   805 ;; ---------------------------------------------------------------------------------
   806 ;; (1) _sleep_deal                                           0     0      0       0
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _powerInit_deal                                       1     1      0     140
   809 ;;                                              5 COMMON     1     1      0
   810 ;;                              _delay
   811 ;; ---------------------------------------------------------------------------------
   812 ;; (3) _GetAD                                               26    24      2     598
   813 ;;                                              0 COMMON     6     4      2
   814 ;;                                              0 BANK0     20    20      0
   815 ;; ---------------------------------------------------------------------------------
   816 ;; (4) ___aldiv                                             14     6      8     300
   817 ;;                                              0 COMMON    14     6      8
   818 ;; ---------------------------------------------------------------------------------
   819 ;; (2) _HOTPWM                                               0     0      0       0
   820 ;; ---------------------------------------------------------------------------------
   821 ;; (2) _USBPWM                                               0     0      0       0
   822 ;; ---------------------------------------------------------------------------------
   823 ;; (1) _Init                                                 0     0      0       0
   824 ;; ---------------------------------------------------------------------------------
   825 ;; (1) _Variates                                             0     0      0       0
   826 ;; ---------------------------------------------------------------------------------
   827 ;; (2) _delay                                                5     3      2      93
   828 ;;                                              0 COMMON     5     3      2
   829 ;; ---------------------------------------------------------------------------------
   830 ;; Estimated maximum stack depth 4
   831 ;; ---------------------------------------------------------------------------------
   832 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   833 ;; ---------------------------------------------------------------------------------
   834 ;; (5) _itr                                                  0     0      0       0
   835 ;; ---------------------------------------------------------------------------------
   836 ;; Estimated maximum stack depth 5
   837 ;; ---------------------------------------------------------------------------------
   838 ;; Call Graph Graphs:
   839 ;; _main (ROOT)
   840 ;;   _Variates
   841 ;;   _Init
   842 ;;   _powerInit_deal
   843 ;;     _delay
   844 ;;   _sleep_deal
   845 ;;   _key_deal
   846 ;;     _power
   847 ;;       _delay
   848 ;;   _smoke_deal
   849 ;;     _BTpower
   850 ;;       _GetBT
   851 ;;         _GetAD
   852 ;;         ___aldiv
   853 ;;     _delay
   854 ;;     _GetHotV
   855 ;;       _GetAD
   856 ;;   _warn_deal
   857 ;;     _delay
   858 ;;   _charge_deal
   859 ;;     _USBPWM
   860 ;;     _HOTPWM
   861 ;;     _delay
   862 ;;     _GetBT
   863 ;;       _GetAD
   864 ;;       ___aldiv
   865 ;;     _GetUsbI
   866 ;;       _GetBT
   867 ;;         _GetAD
   868 ;;         ___aldiv
   869 ;;       _GetAD
   870 ;;     _GetIsense
   871 ;;       _GetAD
   872 ;;
   873 ;; _itr (ROOT)
   874 ;;
   875 ;; Address spaces:
   876 ;;Name               Size   Autos  Total    Cost      Usage
   877 ;;BIGRAM              70      0       0       0        0.0%
   878 ;;NULL                 0      0       0       0        0.0%
   879 ;;CODE                 0      0       0       0        0.0%
   880 ;;BITCOMMON            E      0       0       1        0.0%
   881 ;;BITSFR0              0      0       0       1        0.0%
   882 ;;SFR0                 0      0       0       1        0.0%
   883 ;;COMMON               E      E       E       2      100.0%
   884 ;;BITSFR1              0      0       0       2        0.0%
   885 ;;SFR1                 0      0       0       2        0.0%
   886 ;;BITSFR2              0      0       0       3        0.0%
   887 ;;SFR2                 0      0       0       3        0.0%
   888 ;;STACK                0      0       4       3        0.0%
   889 ;;BITSFR3              0      0       0       4        0.0%
   890 ;;SFR3                 0      0       0       4        0.0%
   891 ;;ABS                  0      0      56       4        0.0%
   892 ;;BITBANK0            50      0       0       5        0.0%
   893 ;;BITSFR4              0      0       0       5        0.0%
   894 ;;SFR4                 0      0       0       5        0.0%
   895 ;;BANK0               50     26      48       6       90.0%
   896 ;;BITSFR5              0      0       0       6        0.0%
   897 ;;SFR5                 0      0       0       6        0.0%
   898 ;;BITBANK1            20      0       0       7        0.0%
   899 ;;BITSFR6              0      0       0       7        0.0%
   900 ;;SFR6                 0      0       0       7        0.0%
   901 ;;BANK1               20      0       0       8        0.0%
   902 ;;BITSFR7              0      0       0       8        0.0%
   903 ;;SFR7                 0      0       0       8        0.0%
   904 ;;BITSFR8              0      0       0       9        0.0%
   905 ;;SFR8                 0      0       0       9        0.0%
   906 ;;DATA                 0      0      5A       9        0.0%
   907 ;;BITSFR9              0      0       0      10        0.0%
   908 ;;SFR9                 0      0       0      10        0.0%
   909 ;;BITSFR10             0      0       0      11        0.0%
   910 ;;SFR10                0      0       0      11        0.0%
   911 ;;BITSFR11             0      0       0      12        0.0%
   912 ;;SFR11                0      0       0      12        0.0%
   913 ;;BITSFR12             0      0       0      13        0.0%
   914 ;;SFR12                0      0       0      13        0.0%
   915 ;;BITSFR13             0      0       0      14        0.0%
   916 ;;SFR13                0      0       0      14        0.0%
   917 ;;BITSFR14             0      0       0      15        0.0%
   918 ;;SFR14                0      0       0      15        0.0%
   919 ;;BITSFR15             0      0       0      16        0.0%
   920 ;;SFR15                0      0       0      16        0.0%
   921 ;;BITSFR16             0      0       0      17        0.0%
   922 ;;SFR16                0      0       0      17        0.0%
   923 ;;BITSFR17             0      0       0      18        0.0%
   924 ;;SFR17                0      0       0      18        0.0%
   925 ;;BITSFR18             0      0       0      19        0.0%
   926 ;;SFR18                0      0       0      19        0.0%
   927 ;;BITSFR19             0      0       0      20        0.0%
   928 ;;SFR19                0      0       0      20        0.0%
   929 ;;BITSFR20             0      0       0      21        0.0%
   930 ;;SFR20                0      0       0      21        0.0%
   931 ;;BITSFR21             0      0       0      22        0.0%
   932 ;;SFR21                0      0       0      22        0.0%
   933 ;;BITSFR22             0      0       0      23        0.0%
   934 ;;SFR22                0      0       0      23        0.0%
   935 ;;BITSFR23             0      0       0      24        0.0%
   936 ;;SFR23                0      0       0      24        0.0%
   937 ;;BITSFR24             0      0       0      25        0.0%
   938 ;;SFR24                0      0       0      25        0.0%
   939 ;;BITSFR25             0      0       0      26        0.0%
   940 ;;SFR25                0      0       0      26        0.0%
   941 ;;BITSFR26             0      0       0      27        0.0%
   942 ;;SFR26                0      0       0      27        0.0%
   943 ;;BITSFR27             0      0       0      28        0.0%
   944 ;;SFR27                0      0       0      28        0.0%
   945 ;;BITSFR28             0      0       0      29        0.0%
   946 ;;SFR28                0      0       0      29        0.0%
   947 ;;BITSFR29             0      0       0      30        0.0%
   948 ;;SFR29                0      0       0      30        0.0%
   949 ;;BITSFR30             0      0       0      31        0.0%
   950 ;;SFR30                0      0       0      31        0.0%
   951 ;;BITSFR31             0      0       0      32        0.0%
   952 ;;SFR31                0      0       0      32        0.0%
   953                           
   954                           
   955 ;; *************** function _main *****************
   956 ;; Defined at:
   957 ;;		line 31 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;		None               void
   964 ;; Registers used:
   965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 17F/0
   968 ;;		On exit  : 1F/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1
   971 ;;      Params:         0       0       0
   972 ;;      Locals:         0       0       0
   973 ;;      Temps:          0       0       0
   974 ;;      Totals:         0       0       0
   975 ;;Total ram usage:        0 bytes
   976 ;; Hardware stack levels required when called:    5
   977 ;; This function calls:
   978 ;;		_Variates
   979 ;;		_Init
   980 ;;		_powerInit_deal
   981 ;;		_sleep_deal
   982 ;;		_key_deal
   983 ;;		_smoke_deal
   984 ;;		_warn_deal
   985 ;;		_charge_deal
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990  04C2                     _main:	
   991                           
   992                           ;main.c: 32: Variates();
   993                           
   994                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
   995  04C2  22DE               	fcall	_Variates
   996                           
   997                           ;main.c: 33: Init();
   998  04C3  239F               	fcall	_Init
   999                           
  1000                           ;main.c: 34: powerInit_deal();
  1001  04C4  2428               	fcall	_powerInit_deal
  1002  04C5                     l8399:	
  1003  04C5  0064               	clrwdt	;#
  1004                           
  1005                           ;main.c: 38: sleep_deal();
  1006  04C6  234A               	fcall	_sleep_deal
  1007                           
  1008                           ;main.c: 39: key_deal();
  1009  04C7  2315               	fcall	_key_deal
  1010                           
  1011                           ;main.c: 40: smoke_deal();
  1012  04C8  240C               	fcall	_smoke_deal
  1013                           
  1014                           ;main.c: 41: warn_deal();
  1015  04C9  22A0               	fcall	_warn_deal
  1016                           
  1017                           ;main.c: 42: charge_deal();
  1018  04CA  2099               	fcall	_charge_deal
  1019  04CB  2CC5               	goto	l8399
  1020  04CC                     __end_of_main:	
  1021                           
  1022                           	psect	text472
  1023  0099                     __ptext472:	
  1024 ;; =============== function _main ends ============
  1025                           
  1026                           
  1027 ;; *************** function _charge_deal *****************
  1028 ;; Defined at:
  1029 ;;		line 299 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  i               1   37[BANK0 ] unsigned char 
  1034 ;;  I               2   34[BANK0 ] unsigned int 
  1035 ;;  BT              2   32[BANK0 ] unsigned int 
  1036 ;;  i               1   36[BANK0 ] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;		None               void
  1039 ;; Registers used:
  1040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 1F/0
  1043 ;;		On exit  : 1F/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1
  1046 ;;      Params:         0       0       0
  1047 ;;      Locals:         0       6       0
  1048 ;;      Temps:          0       0       0
  1049 ;;      Totals:         0       6       0
  1050 ;;Total ram usage:        6 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    4
  1053 ;; This function calls:
  1054 ;;		_USBPWM
  1055 ;;		_HOTPWM
  1056 ;;		_delay
  1057 ;;		_GetBT
  1058 ;;		_GetUsbI
  1059 ;;		_GetIsense
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064  0099                     _charge_deal:	
  1065                           
  1066                           ;main.c: 300: if(!run.press_bit&&!run.finish1_bit)
  1067                           
  1068                           ; Regs used in _charge_deal: [wreg+fsr1l-status,0+pclath+cstack]
  1069  0099  1D63               	btfss	_run+1,2
  1070  009A  1964               	btfsc	_run+2,2
  1071  009B  0008               	return
  1072                           
  1073                           ;main.c: 301: {
  1074                           ;main.c: 302: uchar i;
  1075                           ;main.c: 303: if(RA0||RA2)
  1076  009C  180C               	btfsc	12,0
  1077  009D  28A0               	goto	l3237
  1078  009E  1D0C               	btfss	12,2
  1079  009F  0008               	return
  1080  00A0                     l3237:	
  1081                           
  1082                           ;main.c: 304: {
  1083                           ;main.c: 305: if(!run.USB_bit&&!run.HOT_bit)
  1084  00A0  1E63               	btfss	_run+1,4
  1085  00A1  18E4               	btfsc	_run+2,1
  1086  00A2  28D7               	goto	l8253
  1087                           
  1088                           ;main.c: 306: {
  1089                           ;main.c: 307: RC0 = 1;
  1090  00A3  140E               	bsf	14,0
  1091                           
  1092                           ;main.c: 308: run.power_bit = 0;
  1093  00A4  10E3               	bcf	_run+1,1
  1094                           
  1095                           ;main.c: 309: RA4 = 0;
  1096  00A5  120C               	bcf	12,4
  1097                           
  1098                           ;main.c: 310: RA5 = 0;
  1099  00A6  128C               	bcf	12,5
  1100                           
  1101                           ;main.c: 311: if(RA2)
  1102  00A7  1D0C               	btfss	12,2
  1103  00A8  28AC               	goto	l8209
  1104                           
  1105                           ;main.c: 312: {
  1106                           ;main.c: 313: USBPWM();
  1107  00A9  2473               	fcall	_USBPWM
  1108                           
  1109                           ;main.c: 314: run.USB_bit = 1;
  1110  00AA  1663               	bsf	_run+1,4
  1111                           
  1112                           ;main.c: 315: }
  1113  00AB  28AE               	goto	l8213
  1114  00AC                     l8209:	
  1115                           
  1116                           ;main.c: 316: else
  1117                           ;main.c: 317: {
  1118                           ;main.c: 318: HOTPWM();
  1119  00AC  245E               	fcall	_HOTPWM
  1120                           
  1121                           ;main.c: 319: run.HOT_bit = 1;
  1122  00AD  14E4               	bsf	_run+2,1
  1123  00AE                     l8213:	
  1124                           
  1125                           ;main.c: 320: }
  1126                           ;main.c: 321: for(i=0;i<6;i++)
  1127  00AE  01C4               	clrf	charge_deal@i
  1128  00AF                     l8219:	
  1129                           
  1130                           ;main.c: 322: {
  1131                           ;main.c: 323: Cnt.Count = 0;
  1132  00AF  01D6               	clrf	_Cnt+16
  1133  00B0  01D7               	clrf	_Cnt+17
  1134  00B1  0064               	clrwdt	;#
  1135                           
  1136                           ;main.c: 325: delay(200);
  1137  00B2  30C8               	movlw	200
  1138  00B3  00F0               	movwf	?_delay
  1139  00B4  01F1               	clrf	?_delay+1
  1140  00B5  249C               	fcall	_delay
  1141                           
  1142                           ;main.c: 326: RA4=~RA4;
  1143  00B6  3010               	movlw	16
  1144  00B7  0020               	movlb	0	; select bank0
  1145  00B8  068C               	xorwf	12,f
  1146                           
  1147                           ;main.c: 327: RA5=~RA5;
  1148  00B9  3020               	movlw	32
  1149  00BA  068C               	xorwf	12,f
  1150  00BB  3006               	movlw	6
  1151  00BC  0AC4               	incf	charge_deal@i,f
  1152  00BD  0244               	subwf	charge_deal@i,w
  1153  00BE  1C03               	skipc
  1154  00BF  28AF               	goto	l8219
  1155                           
  1156                           ;main.c: 328: }
  1157                           ;main.c: 329: uint BT;
  1158                           ;main.c: 330: BT = GetBT();
  1159  00C0  23C5               	fcall	_GetBT
  1160  00C1  0835               	movf	?_GetBT+1,w
  1161  00C2  00C1               	movwf	charge_deal@BT+1
  1162  00C3  0834               	movf	?_GetBT,w
  1163  00C4  00C0               	movwf	charge_deal@BT
  1164                           
  1165                           ;main.c: 331: if(BT<1556)
  1166  00C5  3006               	movlw	6
  1167  00C6  0241               	subwf	charge_deal@BT+1,w
  1168  00C7  3014               	movlw	20
  1169  00C8  1903               	skipnz
  1170  00C9  0240               	subwf	charge_deal@BT,w
  1171                           
  1172                           ;main.c: 332: {
  1173                           ;main.c: 333: Cnt.Count = 0;
  1174  00CA  01D6               	clrf	_Cnt+16
  1175  00CB  01D7               	clrf	_Cnt+17
  1176  00CC  1803               	skipnc
  1177  00CD  28D1               	goto	L3
  1178                           
  1179                           ;main.c: 334: RA5 = 0;
  1180  00CE  128C               	bcf	12,5
  1181                           
  1182                           ;main.c: 335: RA4 = 1;
  1183  00CF  160C               	bsf	12,4
  1184                           
  1185                           ;main.c: 336: }
  1186  00D0  28D3               	goto	l3244
  1187  00D1                     L3:	
  1188                           ;main.c: 337: else
  1189                           ;main.c: 338: {
  1190                           ;main.c: 339: Cnt.Count = 0;
  1191                           
  1192                           
  1193                           ;main.c: 340: RA4 = 0;
  1194  00D1  120C               	bcf	12,4
  1195                           
  1196                           ;main.c: 341: RA5 = 1;
  1197  00D2  168C               	bsf	12,5
  1198  00D3                     l3244:	
  1199                           
  1200                           ;main.c: 342: }
  1201                           ;main.c: 343: Cnt.Count = 0;
  1202  00D3  01D6               	clrf	_Cnt+16
  1203  00D4  01D7               	clrf	_Cnt+17
  1204                           
  1205                           ;main.c: 344: run.sec_bit = 1;
  1206  00D5  16E3               	bsf	_run+1,5
  1207                           
  1208                           ;main.c: 345: run.sec2_bit = 1;
  1209  00D6  1464               	bsf	_run+2,0
  1210  00D7                     l8253:	
  1211  00D7  0064               	clrwdt	;#
  1212                           
  1213                           ;main.c: 350: Cnt.Count = 0;
  1214  00D8  0020               	movlb	0	; select bank0
  1215  00D9  01D6               	clrf	_Cnt+16
  1216  00DA  01D7               	clrf	_Cnt+17
  1217                           
  1218                           ;main.c: 352: if(run.finish_bit)
  1219  00DB  1FE3               	btfss	_run+1,7
  1220  00DC  28D7               	goto	l8253
  1221                           
  1222                           ;main.c: 353: {
  1223                           ;main.c: 354: if(!run.over_bit)
  1224  00DD  1B64               	btfsc	_run+2,6
  1225  00DE  2925               	goto	l3247
  1226                           
  1227                           ;main.c: 355: {
  1228                           ;main.c: 356: uint I;
  1229                           ;main.c: 357: if(run.USB_bit)
  1230  00DF  1E63               	btfss	_run+1,4
  1231  00E0  2901               	goto	l3248
  1232                           
  1233                           ;main.c: 358: {
  1234                           ;main.c: 359: PWM1CON = 0x00;
  1235  00E1  002C               	movlb	12	; select bank12
  1236  00E2  0193               	clrf	19	;volatile
  1237                           
  1238                           ;main.c: 360: delay(20);
  1239  00E3  3014               	movlw	20
  1240  00E4  00F0               	movwf	?_delay
  1241  00E5  01F1               	clrf	?_delay+1
  1242  00E6  249C               	fcall	_delay
  1243                           
  1244                           ;main.c: 361: RC5 = 1;
  1245  00E7  0020               	movlb	0	; select bank0
  1246  00E8  3014               	movlw	20
  1247  00E9  168E               	bsf	14,5
  1248                           
  1249                           ;main.c: 362: delay(20);
  1250  00EA  00F0               	movwf	?_delay
  1251  00EB  01F1               	clrf	?_delay+1
  1252  00EC  249C               	fcall	_delay
  1253                           
  1254                           ;main.c: 363: I = GetUsbI();
  1255  00ED  23E9               	fcall	_GetUsbI
  1256  00EE  0839               	movf	?_GetUsbI+1,w
  1257  00EF  00C3               	movwf	charge_deal@I+1
  1258  00F0  0838               	movf	?_GetUsbI,w
  1259  00F1  00C2               	movwf	charge_deal@I
  1260                           
  1261                           ;main.c: 364: if(I>=286)
  1262  00F2  3001               	movlw	1
  1263  00F3  0243               	subwf	charge_deal@I+1,w
  1264  00F4  301E               	movlw	30
  1265  00F5  1903               	skipnz
  1266  00F6  0242               	subwf	charge_deal@I,w
  1267  00F7  1C03               	skipc
  1268  00F8  2900               	goto	l3249
  1269                           
  1270                           ;main.c: 365: {
  1271                           ;main.c: 366: PWM1DCH = 0x3E;
  1272  00F9  303E               	movlw	62
  1273  00FA  002C               	movlb	12	; select bank12
  1274  00FB  0092               	movwf	18	;volatile
  1275                           
  1276                           ;main.c: 367: PWM1DCL = 0x00;
  1277  00FC  0191               	clrf	17	;volatile
  1278                           
  1279                           ;main.c: 368: PWM1CON = 0xE0;
  1280  00FD  30E0               	movlw	224
  1281  00FE  0093               	movwf	19	;volatile
  1282                           
  1283                           ;main.c: 369: }
  1284  00FF  2901               	goto	l3248
  1285  0100                     l3249:	
  1286                           
  1287                           ;main.c: 370: else
  1288                           ;main.c: 371: {
  1289                           ;main.c: 372: run.over_bit = 1;
  1290  0100  1764               	bsf	_run+2,6
  1291  0101                     l3248:	
  1292                           
  1293                           ;main.c: 373: }
  1294                           ;main.c: 374: }
  1295                           ;main.c: 375: if(run.HOT_bit)
  1296  0101  0020               	movlb	0	; select bank0
  1297  0102  1CE4               	btfss	_run+2,1
  1298  0103  2925               	goto	l3247
  1299                           
  1300                           ;main.c: 376: {
  1301                           ;main.c: 377: PWM2CON = 0x00;
  1302  0104  002C               	movlb	12	; select bank12
  1303  0105  0196               	clrf	22	;volatile
  1304                           
  1305                           ;main.c: 378: delay(20);
  1306  0106  3014               	movlw	20
  1307  0107  00F0               	movwf	?_delay
  1308  0108  01F1               	clrf	?_delay+1
  1309  0109  249C               	fcall	_delay
  1310                           
  1311                           ;main.c: 379: RC3 = 1;
  1312  010A  0020               	movlb	0	; select bank0
  1313  010B  3014               	movlw	20
  1314  010C  158E               	bsf	14,3
  1315                           
  1316                           ;main.c: 380: delay(20);
  1317  010D  00F0               	movwf	?_delay
  1318  010E  01F1               	clrf	?_delay+1
  1319  010F  249C               	fcall	_delay
  1320                           
  1321                           ;main.c: 381: I = GetIsense();
  1322  0110  2488               	fcall	_GetIsense
  1323  0111  0877               	movf	?_GetIsense+1,w
  1324  0112  0020               	movlb	0	; select bank0
  1325  0113  00C3               	movwf	charge_deal@I+1
  1326  0114  0876               	movf	?_GetIsense,w
  1327  0115  00C2               	movwf	charge_deal@I
  1328                           
  1329                           ;main.c: 382: if(I>=200)
  1330  0116  3000               	movlw	0
  1331  0117  0243               	subwf	charge_deal@I+1,w
  1332  0118  30C8               	movlw	200
  1333  0119  1903               	skipnz
  1334  011A  0242               	subwf	charge_deal@I,w
  1335  011B  1C03               	skipc
  1336  011C  2924               	goto	l3252
  1337                           
  1338                           ;main.c: 383: {
  1339                           ;main.c: 384: PWM2DCH = 0x5D;
  1340  011D  305D               	movlw	93
  1341  011E  002C               	movlb	12	; select bank12
  1342  011F  0095               	movwf	21	;volatile
  1343                           
  1344                           ;main.c: 385: PWM2DCL = 0x00;
  1345  0120  0194               	clrf	20	;volatile
  1346                           
  1347                           ;main.c: 386: PWM2CON = 0xE0;
  1348  0121  30E0               	movlw	224
  1349  0122  0096               	movwf	22	;volatile
  1350                           
  1351                           ;main.c: 388: }
  1352  0123  2925               	goto	l3247
  1353  0124                     l3252:	
  1354                           
  1355                           ;main.c: 389: else
  1356                           ;main.c: 390: {
  1357                           ;main.c: 391: run.over_bit = 1;
  1358  0124  1764               	bsf	_run+2,6
  1359  0125                     l3247:	
  1360                           
  1361                           ;main.c: 392: }
  1362                           ;main.c: 393: }
  1363                           ;main.c: 394: }
  1364                           ;main.c: 395: if(run.USB_bit)
  1365  0125  0020               	movlb	0	; select bank0
  1366  0126  1E63               	btfss	_run+1,4
  1367  0127  292C               	goto	l8301
  1368                           
  1369                           ;main.c: 396: {
  1370                           ;main.c: 397: PWM1CON = 0x00;
  1371  0128  002C               	movlb	12	; select bank12
  1372  0129  0193               	clrf	19	;volatile
  1373                           
  1374                           ;main.c: 398: RC5 = 0;
  1375  012A  0020               	movlb	0	; select bank0
  1376  012B  128E               	bcf	14,5
  1377  012C                     l8301:	
  1378                           
  1379                           ;main.c: 399: }
  1380                           ;main.c: 400: if(run.HOT_bit)
  1381  012C  1CE4               	btfss	_run+2,1
  1382  012D  2932               	goto	l8307
  1383                           
  1384                           ;main.c: 401: {
  1385                           ;main.c: 402: PWM2CON = 0x00;
  1386  012E  002C               	movlb	12	; select bank12
  1387  012F  0196               	clrf	22	;volatile
  1388                           
  1389                           ;main.c: 403: RC3 = 0;
  1390  0130  0020               	movlb	0	; select bank0
  1391  0131  118E               	bcf	14,3
  1392  0132                     l8307:	
  1393                           
  1394                           ;main.c: 404: }
  1395                           ;main.c: 405: delay(100);
  1396  0132  3064               	movlw	100
  1397  0133  00F0               	movwf	?_delay
  1398  0134  01F1               	clrf	?_delay+1
  1399  0135  249C               	fcall	_delay
  1400                           
  1401                           ;main.c: 407: if(run.HOT_bit&&GetBT()>=2007)
  1402  0136  1CE4               	btfss	_run+2,1
  1403  0137  2940               	goto	l3256
  1404  0138  23C5               	fcall	_GetBT
  1405  0139  3007               	movlw	7
  1406  013A  0235               	subwf	?_GetBT+1,w
  1407  013B  30D7               	movlw	215
  1408  013C  1903               	skipnz
  1409  013D  0234               	subwf	?_GetBT,w
  1410  013E  1803               	btfsc	3,0
  1411                           
  1412                           ;main.c: 408: {
  1413                           ;main.c: 409: run.complete = 1;
  1414  013F  14E5               	bsf	_run+3,1
  1415  0140                     l3256:	
  1416                           
  1417                           ;main.c: 410: }
  1418                           ;main.c: 411: if(run.USB_bit&&GetBT()>=1966)
  1419  0140  1E63               	btfss	_run+1,4
  1420  0141  294A               	goto	l3257
  1421  0142  23C5               	fcall	_GetBT
  1422  0143  3007               	movlw	7
  1423  0144  0235               	subwf	?_GetBT+1,w
  1424  0145  30AE               	movlw	174
  1425  0146  1903               	skipnz
  1426  0147  0234               	subwf	?_GetBT,w
  1427  0148  1803               	btfsc	3,0
  1428                           
  1429                           ;main.c: 412: {
  1430                           ;main.c: 413: run.complete = 1;
  1431  0149  14E5               	bsf	_run+3,1
  1432  014A                     l3257:	
  1433                           
  1434                           ;main.c: 414: }
  1435                           ;main.c: 415: if(run.complete)
  1436  014A  1CE5               	btfss	_run+3,1
  1437  014B  2974               	goto	l8357
  1438                           
  1439                           ;main.c: 416: {
  1440                           ;main.c: 417: uchar i;
  1441                           ;main.c: 418: run.complete = 0;
  1442  014C  10E5               	bcf	_run+3,1
  1443                           
  1444                           ;main.c: 419: Cnt.Count = 0;
  1445  014D  01D6               	clrf	_Cnt+16
  1446  014E  01D7               	clrf	_Cnt+17
  1447                           
  1448                           ;main.c: 420: run.over_bit = 0;
  1449  014F  1364               	bcf	_run+2,6
  1450                           
  1451                           ;main.c: 421: run.finish_bit = 0;
  1452  0150  13E3               	bcf	_run+1,7
  1453                           
  1454                           ;main.c: 422: Cnt.ChgCount = 0;
  1455  0151  01D8               	clrf	_Cnt+18
  1456  0152  01D9               	clrf	_Cnt+19
  1457                           
  1458                           ;main.c: 423: run.sec_bit = 0;
  1459  0153  12E3               	bcf	_run+1,5
  1460                           
  1461                           ;main.c: 424: RA4 = 0;
  1462  0154  120C               	bcf	12,4
  1463                           
  1464                           ;main.c: 425: RA5 = 0;
  1465  0155  128C               	bcf	12,5
  1466                           
  1467                           ;main.c: 426: for(i=0;i<42;i++)
  1468  0156  01C5               	clrf	charge_deal@i_5379
  1469  0157                     l8337:	
  1470                           
  1471                           ;main.c: 427: {
  1472                           ;main.c: 428: Cnt.Count = 0;
  1473  0157  01D6               	clrf	_Cnt+16
  1474  0158  01D7               	clrf	_Cnt+17
  1475  0159  0064               	clrwdt	;#
  1476                           
  1477                           ;main.c: 430: delay(150);
  1478  015A  3096               	movlw	150
  1479  015B  00F0               	movwf	?_delay
  1480  015C  01F1               	clrf	?_delay+1
  1481  015D  249C               	fcall	_delay
  1482                           
  1483                           ;main.c: 431: RA5=~RA5;
  1484  015E  3020               	movlw	32
  1485  015F  0020               	movlb	0	; select bank0
  1486  0160  068C               	xorwf	12,f
  1487  0161  302A               	movlw	42
  1488  0162  0AC5               	incf	charge_deal@i_5379,f
  1489  0163  0245               	subwf	charge_deal@i_5379,w
  1490  0164  1C03               	skipc
  1491  0165  2957               	goto	l8337
  1492                           
  1493                           ;main.c: 432: }
  1494                           ;main.c: 433: RA5 = 0;
  1495  0166  128C               	bcf	12,5
  1496                           
  1497                           ;main.c: 434: run.HOT_bit = 0;
  1498  0167  10E4               	bcf	_run+2,1
  1499                           
  1500                           ;main.c: 435: run.USB_bit = 0;
  1501  0168  1263               	bcf	_run+1,4
  1502                           
  1503                           ;main.c: 436: run.power_bit = 1;
  1504  0169  14E3               	bsf	_run+1,1
  1505                           
  1506                           ;main.c: 437: run.sleep_bit = 1;
  1507  016A  15E3               	bsf	_run+1,3
  1508                           
  1509                           ;main.c: 438: Cnt.Count = 0;
  1510  016B  01D6               	clrf	_Cnt+16
  1511  016C  01D7               	clrf	_Cnt+17
  1512  016D                     L2:	
  1513                           
  1514                           ;main.c: 439: PWM1CON = 0x00;
  1515  016D  002C               	movlb	12	; select bank12
  1516  016E  0193               	clrf	19	;volatile
  1517                           
  1518                           ;main.c: 440: PWM2CON = 0x00;
  1519  016F  0196               	clrf	22	;volatile
  1520                           
  1521                           ;main.c: 441: RC3 = 0;
  1522  0170  0020               	movlb	0	; select bank0
  1523  0171  118E               	bcf	14,3
  1524                           
  1525                           ;main.c: 442: RC5 = 0;
  1526  0172  128E               	bcf	14,5
  1527  0173  0008               	return
  1528  0174                     l8357:	
  1529                           
  1530                           ;main.c: 444: }
  1531                           ;main.c: 445: if(GetBT()<1556)
  1532  0174  23C5               	fcall	_GetBT
  1533  0175  3006               	movlw	6
  1534  0176  0235               	subwf	?_GetBT+1,w
  1535  0177  3014               	movlw	20
  1536  0178  1903               	skipnz
  1537  0179  0234               	subwf	?_GetBT,w
  1538  017A  1803               	skipnc
  1539  017B  297F               	goto	l3262
  1540                           
  1541                           ;main.c: 446: {
  1542                           ;main.c: 447: RA5 = 0;
  1543  017C  128C               	bcf	12,5
  1544                           
  1545                           ;main.c: 448: RA4 = 1;
  1546  017D  160C               	bsf	12,4
  1547                           
  1548                           ;main.c: 449: }
  1549  017E  2981               	goto	l3263
  1550  017F                     l3262:	
  1551                           
  1552                           ;main.c: 450: else
  1553                           ;main.c: 451: {
  1554                           ;main.c: 452: RA4 = 0;
  1555  017F  120C               	bcf	12,4
  1556                           
  1557                           ;main.c: 453: RA5 = 1;
  1558  0180  168C               	bsf	12,5
  1559  0181                     l3263:	
  1560                           
  1561                           ;main.c: 454: }
  1562                           ;main.c: 455: if(!RA0&&!RA2)
  1563  0181  180C               	btfsc	12,0
  1564  0182  2985               	goto	l3264
  1565  0183  1D0C               	btfss	12,2
  1566  0184  299B               	goto	l3265
  1567  0185                     l3264:	
  1568                           
  1569                           ;main.c: 458: }
  1570                           ;main.c: 459: if(run.USB_bit)
  1571  0185  1E63               	btfss	_run+1,4
  1572  0186  298E               	goto	l8371
  1573                           
  1574                           ;main.c: 460: {
  1575                           ;main.c: 461: if(run.over_bit)
  1576  0187  1F64               	btfss	_run+2,6
  1577  0188  298B               	goto	l8369
  1578                           
  1579                           ;main.c: 462: RC5 = 1;
  1580  0189  168E               	bsf	14,5
  1581  018A  298E               	goto	l8371
  1582  018B                     l8369:	
  1583                           
  1584                           ;main.c: 463: else
  1585                           ;main.c: 464: PWM1CON = 0xE0;
  1586  018B  30E0               	movlw	224
  1587  018C  002C               	movlb	12	; select bank12
  1588  018D  0093               	movwf	19	;volatile
  1589  018E                     l8371:	
  1590                           
  1591                           ;main.c: 465: }
  1592                           ;main.c: 466: if(run.HOT_bit)
  1593  018E  0020               	movlb	0	; select bank0
  1594  018F  1CE4               	btfss	_run+2,1
  1595  0190  2998               	goto	l8379
  1596                           
  1597                           ;main.c: 467: {
  1598                           ;main.c: 468: if(run.over_bit)
  1599  0191  1F64               	btfss	_run+2,6
  1600  0192  2995               	goto	l8377
  1601                           
  1602                           ;main.c: 469: RC3 = 1;
  1603  0193  158E               	bsf	14,3
  1604  0194  2998               	goto	l8379
  1605  0195                     l8377:	
  1606                           
  1607                           ;main.c: 470: else
  1608                           ;main.c: 471: PWM2CON = 0xE0;
  1609  0195  30E0               	movlw	224
  1610  0196  002C               	movlb	12	; select bank12
  1611  0197  0096               	movwf	22	;volatile
  1612  0198                     l8379:	
  1613                           
  1614                           ;main.c: 472: }
  1615                           ;main.c: 473: run.finish_bit = 0;
  1616  0198  0020               	movlb	0	; select bank0
  1617  0199  13E3               	bcf	_run+1,7
  1618  019A  28D7               	goto	l8253
  1619  019B                     l3265:	
  1620                           
  1621                           ;main.c: 474: }
  1622                           ;main.c: 475: }
  1623                           ;main.c: 476: run.wait_bit = 0;
  1624  019B  11E4               	bcf	_run+2,3
  1625                           
  1626                           ;main.c: 477: run.over_bit = 0;
  1627  019C  1364               	bcf	_run+2,6
  1628                           
  1629                           ;main.c: 478: run.finish_bit = 0;
  1630  019D  13E3               	bcf	_run+1,7
  1631                           
  1632                           ;main.c: 479: Cnt.ChgCount = 0;
  1633  019E  01D8               	clrf	_Cnt+18
  1634  019F  01D9               	clrf	_Cnt+19
  1635                           
  1636                           ;main.c: 480: run.USB_bit = 0;
  1637  01A0  1263               	bcf	_run+1,4
  1638                           
  1639                           ;main.c: 481: run.HOT_bit = 0;
  1640  01A1  10E4               	bcf	_run+2,1
  1641                           
  1642                           ;main.c: 482: run.complete = 0;
  1643  01A2  10E5               	bcf	_run+3,1
  1644                           
  1645                           ;main.c: 483: run.power_bit = 1;
  1646  01A3  14E3               	bsf	_run+1,1
  1647                           
  1648                           ;main.c: 484: run.sec_bit = 0;
  1649  01A4  12E3               	bcf	_run+1,5
  1650  01A5  296D               	goto	L2
  1651  01A6                     __end_of_charge_deal:	
  1652                           ;main.c: 486: PWM2CON = 0x00;
  1653                           
  1654                           ;main.c: 485: PWM1CON = 0x00;
  1655                           
  1656                           
  1657                           	psect	text473
  1658  040C                     __ptext473:	
  1659 ;; =============== function _charge_deal ends ============
  1660                           
  1661                           
  1662 ;; *************** function _smoke_deal *****************
  1663 ;; Defined at:
  1664 ;;		line 202 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;		None               void
  1671 ;; Registers used:
  1672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 1F/0
  1675 ;;		On exit  : 1C/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1
  1678 ;;      Params:         0       0       0
  1679 ;;      Locals:         0       0       0
  1680 ;;      Temps:          0       0       0
  1681 ;;      Totals:         0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    4
  1685 ;; This function calls:
  1686 ;;		_BTpower
  1687 ;;		_delay
  1688 ;;		_GetHotV
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693  040C                     _smoke_deal:	
  1694                           
  1695                           ;main.c: 203: if(run.power_bit&&run.press_bit)
  1696                           
  1697                           ; Regs used in _smoke_deal: [wreg+fsr1l-status,0+pclath+cstack]
  1698  040C  18E3               	btfsc	_run+1,1
  1699  040D  1D63               	btfss	_run+1,2
  1700  040E  0008               	return
  1701                           
  1702                           ;main.c: 204: {
  1703                           ;main.c: 205: if(!run.lock_bit)
  1704  040F  1865               	btfsc	_run+3,0
  1705  0410  2C1A               	goto	l8185
  1706                           
  1707                           ;main.c: 206: {
  1708                           ;main.c: 208: run.show_bit = 1;
  1709  0411  14E2               	bsf	_run,1
  1710                           
  1711                           ;main.c: 209: run.smoke_bit = 1;
  1712  0412  1662               	bsf	_run,4
  1713                           
  1714                           ;main.c: 210: run.lock_bit = 1;
  1715  0413  1465               	bsf	_run+3,0
  1716                           
  1717                           ;main.c: 211: BTpower();
  1718  0414  2444               	fcall	_BTpower
  1719  0415  300A               	movlw	10
  1720                           
  1721                           ;main.c: 212: RC3 = 1;
  1722  0416  158E               	bsf	14,3
  1723                           
  1724                           ;main.c: 213: delay(10);
  1725  0417  00F0               	movwf	?_delay
  1726  0418  01F1               	clrf	?_delay+1
  1727  0419  249C               	fcall	_delay
  1728  041A                     l8185:	
  1729                           
  1730                           ;main.c: 214: }
  1731                           ;main.c: 215: if(GetHotV()<532)
  1732  041A  24B0               	fcall	_GetHotV
  1733  041B  3002               	movlw	2
  1734  041C  0277               	subwf	?_GetHotV+1,w
  1735  041D  3014               	movlw	20
  1736  041E  1903               	skipnz
  1737  041F  0276               	subwf	?_GetHotV,w
  1738  0420  1803               	skipnc
  1739  0421  0008               	return
  1740                           
  1741                           ;main.c: 216: {
  1742                           ;main.c: 217: RC3 = 0;
  1743  0422  0020               	movlb	0	; select bank0
  1744  0423  3003               	movlw	3
  1745  0424  118E               	bcf	14,3
  1746                           
  1747                           ;main.c: 218: run.warn_bit = 1;
  1748  0425  15E2               	bsf	_run,3
  1749                           
  1750                           ;main.c: 219: Cnt.warn = 3;
  1751  0426  00CB               	movwf	_Cnt+5
  1752  0427  0008               	return
  1753  0428                     __end_of_smoke_deal:	
  1754                           
  1755                           	psect	text474
  1756  0444                     __ptext474:	
  1757 ;; =============== function _smoke_deal ends ============
  1758                           
  1759                           
  1760 ;; *************** function _BTpower *****************
  1761 ;; Defined at:
  1762 ;;		line 277 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 1F/0
  1773 ;;		On exit  : 1F/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1
  1776 ;;      Params:         0       0       0
  1777 ;;      Locals:         0       0       0
  1778 ;;      Temps:          0       0       0
  1779 ;;      Totals:         0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    3
  1783 ;; This function calls:
  1784 ;;		_GetBT
  1785 ;; This function is called by:
  1786 ;;		_smoke_deal
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789  0444                     _BTpower:	
  1790                           
  1791                           ;main.c: 278: TempVAD = GetBT();
  1792                           
  1793                           ; Regs used in _BTpower: [wreg+fsr1l-status,0+pclath+cstack]
  1794  0444  23C5               	fcall	_GetBT
  1795  0445  0835               	movf	?_GetBT+1,w
  1796  0446  00E7               	movwf	_TempVAD+1
  1797  0447  0834               	movf	?_GetBT,w
  1798  0448  00E6               	movwf	_TempVAD
  1799                           
  1800                           ;main.c: 279: if(TempVAD<1228)
  1801  0449  3004               	movlw	4
  1802  044A  0267               	subwf	_TempVAD+1,w
  1803  044B  30CC               	movlw	204
  1804  044C  1903               	skipnz
  1805  044D  0266               	subwf	_TempVAD,w
  1806  044E  1803               	skipnc
  1807  044F  2C55               	goto	l8167
  1808  0450  3002               	movlw	2
  1809                           
  1810                           ;main.c: 280: {
  1811                           ;main.c: 281: run.warn_bit = 1;
  1812  0451  15E2               	bsf	_run,3
  1813                           
  1814                           ;main.c: 282: Cnt.warn = 2;
  1815  0452  00CB               	movwf	_Cnt+5
  1816  0453                     l8163:	
  1817                           
  1818                           ;main.c: 283: run.LEDB_bit = 0;
  1819  0453  1162               	bcf	_run,2
  1820  0454  0008               	return
  1821  0455                     l8167:	
  1822                           
  1823                           ;main.c: 285: }
  1824                           ;main.c: 286: if(TempVAD>1556)
  1825  0455  3006               	movlw	6
  1826  0456  0267               	subwf	_TempVAD+1,w
  1827  0457  3015               	movlw	21
  1828  0458  1903               	skipnz
  1829  0459  0266               	subwf	_TempVAD,w
  1830  045A  1C03               	skipc
  1831  045B  2C53               	goto	l8163
  1832                           
  1833                           ;main.c: 287: {
  1834                           ;main.c: 288: run.LEDB_bit = 1;
  1835  045C  1562               	bsf	_run,2
  1836                           
  1837                           ;main.c: 289: }
  1838  045D  0008               	return
  1839  045E                     __end_of_BTpower:	
  1840                           
  1841                           	psect	text475
  1842  03E9                     __ptext475:	
  1843 ;; =============== function _BTpower ends ============
  1844                           
  1845                           
  1846 ;; *************** function _GetUsbI *****************
  1847 ;; Defined at:
  1848 ;;		line 100 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\AD.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  I               2   30[BANK0 ] unsigned int 
  1853 ;;  V               2   28[BANK0 ] unsigned int 
  1854 ;;  BT              2   26[BANK0 ] unsigned int 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  2   24[BANK0 ] unsigned int 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 1F/0
  1861 ;;		On exit  : 1F/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1
  1864 ;;      Params:         0       2       0
  1865 ;;      Locals:         0       6       0
  1866 ;;      Temps:          0       0       0
  1867 ;;      Totals:         0       8       0
  1868 ;;Total ram usage:        8 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    3
  1871 ;; This function calls:
  1872 ;;		_GetBT
  1873 ;;		_GetAD
  1874 ;; This function is called by:
  1875 ;;		_charge_deal
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878  03E9                     _GetUsbI:	
  1879                           
  1880                           ;AD.c: 101: uint V,I,BT;
  1881                           ;AD.c: 102: BT = GetBT();
  1882                           
  1883                           ; Regs used in _GetUsbI: [wreg+fsr1l-status,0+pclath+cstack]
  1884  03E9  23C5               	fcall	_GetBT
  1885  03EA  0835               	movf	?_GetBT+1,w
  1886  03EB  00BB               	movwf	GetUsbI@BT+1
  1887  03EC  0834               	movf	?_GetBT,w
  1888  03ED  00BA               	movwf	GetUsbI@BT
  1889                           
  1890                           ;AD.c: 103: ANSC2 = 1;
  1891  03EE  0023               	movlb	3	; select bank3
  1892  03EF  3018               	movlw	24
  1893  03F0  150E               	bsf	14,2
  1894                           
  1895                           ;AD.c: 104: ADCON0 = 0x18;
  1896  03F1  0021               	movlb	1	; select bank1
  1897  03F2  009D               	movwf	29	;volatile
  1898                           
  1899                           ;AD.c: 105: ADCON1 = 0xA2;
  1900  03F3  30A2               	movlw	162
  1901  03F4  009E               	movwf	30	;volatile
  1902                           
  1903                           ;AD.c: 106: V = GetAD();
  1904  03F5  21A6               	fcall	_GetAD
  1905  03F6  0871               	movf	?_GetAD+1,w
  1906  03F7  00BD               	movwf	GetUsbI@V+1
  1907  03F8  0870               	movf	?_GetAD,w
  1908  03F9  00BC               	movwf	GetUsbI@V
  1909                           
  1910                           ;AD.c: 107: ANSC2 = 0;
  1911  03FA  0023               	movlb	3	; select bank3
  1912  03FB  110E               	bcf	14,2
  1913                           
  1914                           ;AD.c: 108: V = V*2;
  1915  03FC  0020               	movlb	0	; select bank0
  1916  03FD  35BC               	lslf	GetUsbI@V,f
  1917  03FE  0DBD               	rlf	GetUsbI@V+1,f
  1918                           
  1919                           ;AD.c: 110: I = V - BT;
  1920  03FF  083D               	movf	GetUsbI@V+1,w
  1921  0400  00BF               	movwf	GetUsbI@I+1
  1922  0401  083C               	movf	GetUsbI@V,w
  1923  0402  00BE               	movwf	GetUsbI@I
  1924  0403  083A               	movf	GetUsbI@BT,w
  1925  0404  02BE               	subwf	GetUsbI@I,f
  1926  0405  083B               	movf	GetUsbI@BT+1,w
  1927  0406  3BBF               	subwfb	GetUsbI@I+1,f
  1928                           
  1929                           ;AD.c: 111: return I;
  1930  0407  083F               	movf	GetUsbI@I+1,w
  1931  0408  00B9               	movwf	?_GetUsbI+1
  1932  0409  083E               	movf	GetUsbI@I,w
  1933  040A  00B8               	movwf	?_GetUsbI
  1934  040B  0008               	return
  1935  040C                     __end_of_GetUsbI:	
  1936                           
  1937                           	psect	text476
  1938  0315                     __ptext476:	
  1939 ;; =============== function _GetUsbI ends ============
  1940                           
  1941                           
  1942 ;; *************** function _key_deal *****************
  1943 ;; Defined at:
  1944 ;;		line 102 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 1F/0
  1955 ;;		On exit  : 1F/0
  1956 ;;		Unchanged: FFE00/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1
  1958 ;;      Params:         0       0       0
  1959 ;;      Locals:         0       0       0
  1960 ;;      Temps:          0       0       0
  1961 ;;      Totals:         0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    3
  1965 ;; This function calls:
  1966 ;;		_power
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971  0315                     _key_deal:	
  1972                           
  1973                           ;main.c: 103: if(RA3==0)
  1974                           
  1975                           ; Regs used in _key_deal: [wreg+status,2+status,0+pclath+cstack]
  1976  0315  198C               	btfsc	12,3
  1977  0316  2B38               	goto	l8121
  1978                           
  1979                           ;main.c: 104: {
  1980                           ;main.c: 105: Cnt.DelayTime = 0;
  1981  0317  01C6               	clrf	_Cnt
  1982  0318  01C7               	clrf	_Cnt+1
  1983                           
  1984                           ;main.c: 106: if(run.press_bit==0&&++Cnt.presstime>=99)
  1985  0319  1963               	btfsc	_run+1,2
  1986  031A  2B28               	goto	l8103
  1987  031B  3063               	movlw	99
  1988  031C  0ACF               	incf	_Cnt+9,f
  1989  031D  024F               	subwf	_Cnt+9,w
  1990  031E  1C03               	skipc
  1991  031F  2B28               	goto	l8103
  1992                           
  1993                           ;main.c: 107: {
  1994                           ;main.c: 108: run.key = 1;
  1995  0320  1762               	bsf	_run,6
  1996                           
  1997                           ;main.c: 109: Cnt.presstime = 0;
  1998  0321  01CF               	clrf	_Cnt+9
  1999                           
  2000                           ;main.c: 110: run.press_bit = 1;
  2001  0322  1563               	bsf	_run+1,2
  2002                           
  2003                           ;main.c: 111: if(run.power_bit)
  2004  0323  1CE3               	btfss	_run+1,1
  2005  0324  2B27               	goto	l8101
  2006                           
  2007                           ;main.c: 112: {
  2008                           ;main.c: 113: run.wait_bit = 1;
  2009  0325  15E4               	bsf	_run+2,3
  2010                           
  2011                           ;main.c: 114: run.check1_bit = 0;
  2012  0326  1264               	bcf	_run+2,4
  2013  0327                     l8101:	
  2014                           
  2015                           ;main.c: 115: }
  2016                           ;main.c: 116: Cnt.keydn++;
  2017  0327  0ACC               	incf	_Cnt+6,f
  2018  0328                     l8103:	
  2019                           
  2020                           ;main.c: 117: }
  2021                           ;main.c: 118: if(Cnt.keydn>=3)
  2022  0328  3003               	movlw	3
  2023  0329  024C               	subwf	_Cnt+6,w
  2024  032A  1C03               	skipc
  2025  032B  2B33               	goto	l8115
  2026                           
  2027                           ;main.c: 119: {
  2028                           ;main.c: 120: Cnt.keydn = 0;
  2029  032C  01CC               	clrf	_Cnt+6
  2030                           
  2031                           ;main.c: 121: if(run.power_bit)
  2032  032D  1CE3               	btfss	_run+1,1
  2033  032E  2B31               	goto	l3186
  2034                           
  2035                           ;main.c: 122: {
  2036                           ;main.c: 123: run.poweroff_bit = 1;
  2037  032F  17E2               	bsf	_run,7
  2038                           
  2039                           ;main.c: 125: }
  2040  0330  2B32               	goto	l8111
  2041  0331                     l3186:	
  2042                           
  2043                           ;main.c: 126: else
  2044                           ;main.c: 127: {
  2045                           ;main.c: 128: run.poweron_bit = 1;
  2046  0331  1463               	bsf	_run+1,0
  2047  0332                     l8111:	
  2048                           
  2049                           ;main.c: 124: power();
  2050  0332  2378               	fcall	_power
  2051  0333                     l8115:	
  2052                           
  2053                           ;main.c: 130: }
  2054                           ;main.c: 131: }
  2055                           ;main.c: 132: if(run.power_bit&&run.press_bit)
  2056  0333  18E3               	btfsc	_run+1,1
  2057  0334  1D63               	btfss	_run+1,2
  2058  0335  2B38               	goto	l8121
  2059                           
  2060                           ;main.c: 133: {
  2061                           ;main.c: 134: Cnt.Count = 0;
  2062  0336  01D6               	clrf	_Cnt+16
  2063  0337  01D7               	clrf	_Cnt+17
  2064  0338                     l8121:	
  2065                           
  2066                           ;main.c: 135: }
  2067                           ;main.c: 136: }
  2068                           ;main.c: 137: if(RA3)
  2069  0338  1D8C               	btfss	12,3
  2070  0339  0008               	return
  2071                           
  2072                           ;main.c: 138: {
  2073                           ;main.c: 139: run.lock_bit = 0;
  2074  033A  1065               	bcf	_run+3,0
  2075                           
  2076                           ;main.c: 140: run.press_bit = 0;
  2077  033B  1163               	bcf	_run+1,2
  2078                           
  2079                           ;main.c: 141: run.wait_bit = 0;
  2080  033C  11E4               	bcf	_run+2,3
  2081                           
  2082                           ;main.c: 142: run.show_bit = 0;
  2083  033D  10E2               	bcf	_run,1
  2084                           
  2085                           ;main.c: 143: if(run.smoke_bit)
  2086  033E  1E62               	btfss	_run,4
  2087  033F  2B46               	goto	l8129
  2088                           
  2089                           ;main.c: 144: {
  2090                           ;main.c: 145: run.finish1_bit = 1;
  2091  0340  1564               	bsf	_run+2,2
  2092                           
  2093                           ;main.c: 146: run.close_bit = 1;
  2094  0341  1462               	bsf	_run,0
  2095                           
  2096                           ;main.c: 147: RC3 = 0;
  2097  0342  118E               	bcf	14,3
  2098                           
  2099                           ;main.c: 148: run.check1_bit = 0;
  2100  0343  1264               	bcf	_run+2,4
  2101                           
  2102                           ;main.c: 149: Cnt.Chgdelay1 = 0;
  2103  0344  01DE               	clrf	_Cnt+24
  2104  0345  01DF               	clrf	_Cnt+25
  2105  0346                     l8129:	
  2106                           
  2107                           ;main.c: 150: }
  2108                           ;main.c: 151: run.key = 0;
  2109  0346  1362               	bcf	_run,6
  2110                           
  2111                           ;main.c: 152: RC3 = 0;
  2112  0347  118E               	bcf	14,3
  2113                           
  2114                           ;main.c: 154: run.smoke_bit = 0;
  2115  0348  1262               	bcf	_run,4
  2116  0349  0008               	return
  2117  034A                     __end_of_key_deal:	
  2118                           
  2119                           	psect	text477
  2120  0488                     __ptext477:	
  2121 ;; =============== function _key_deal ends ============
  2122                           
  2123                           
  2124 ;; *************** function _GetIsense *****************
  2125 ;; Defined at:
  2126 ;;		line 76 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\AD.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  I               2    8[COMMON] unsigned int 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  2    6[COMMON] unsigned int 
  2133 ;; Registers used:
  2134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 1F/0
  2137 ;;		On exit  : 1F/3
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1
  2140 ;;      Params:         2       0       0
  2141 ;;      Locals:         2       0       0
  2142 ;;      Temps:          0       0       0
  2143 ;;      Totals:         4       0       0
  2144 ;;Total ram usage:        4 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    2
  2147 ;; This function calls:
  2148 ;;		_GetAD
  2149 ;; This function is called by:
  2150 ;;		_charge_deal
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153  0488                     _GetIsense:	
  2154                           
  2155                           ;AD.c: 77: uint I;
  2156                           ;AD.c: 78: RC4 = 1;
  2157                           
  2158                           ; Regs used in _GetIsense: [wreg+fsr1l-status,0+pclath+cstack]
  2159  0488  160E               	bsf	14,4
  2160                           
  2161                           ;AD.c: 79: ANSC1 = 1;
  2162  0489  0023               	movlb	3	; select bank3
  2163  048A  3014               	movlw	20
  2164  048B  148E               	bsf	14,1
  2165                           
  2166                           ;AD.c: 80: ADCON0 = 0x14;
  2167  048C  0021               	movlb	1	; select bank1
  2168  048D  009D               	movwf	29	;volatile
  2169                           
  2170                           ;AD.c: 81: ADCON1 = 0xA2;
  2171  048E  30A2               	movlw	162
  2172  048F  009E               	movwf	30	;volatile
  2173                           
  2174                           ;AD.c: 82: I = GetAD();
  2175  0490  21A6               	fcall	_GetAD
  2176  0491  0871               	movf	?_GetAD+1,w
  2177  0492  00F9               	movwf	GetIsense@I+1
  2178  0493  0870               	movf	?_GetAD,w
  2179  0494  00F8               	movwf	GetIsense@I
  2180                           
  2181                           ;AD.c: 83: ANSC1 = 0;
  2182  0495  0023               	movlb	3	; select bank3
  2183  0496  108E               	bcf	14,1
  2184                           
  2185                           ;AD.c: 84: return I;
  2186  0497  0879               	movf	GetIsense@I+1,w
  2187  0498  00F7               	movwf	?_GetIsense+1
  2188  0499  0878               	movf	GetIsense@I,w
  2189  049A  00F6               	movwf	?_GetIsense
  2190  049B  0008               	return
  2191  049C                     __end_of_GetIsense:	
  2192                           
  2193                           	psect	text478
  2194  03C5                     __ptext478:	
  2195 ;; =============== function _GetIsense ends ============
  2196                           
  2197                           
  2198 ;; *************** function _GetBT *****************
  2199 ;; Defined at:
  2200 ;;		line 63 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\AD.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  BT              2   22[BANK0 ] unsigned int 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  2   20[BANK0 ] unsigned int 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 1F/0
  2211 ;;		On exit  : 1F/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1
  2214 ;;      Params:         0       2       0
  2215 ;;      Locals:         0       2       0
  2216 ;;      Temps:          0       0       0
  2217 ;;      Totals:         0       4       0
  2218 ;;Total ram usage:        4 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		_GetAD
  2223 ;;		___aldiv
  2224 ;; This function is called by:
  2225 ;;		_GetUsbI
  2226 ;;		_BTpower
  2227 ;;		_charge_deal
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230  03C5                     _GetBT:	
  2231                           
  2232                           ;AD.c: 64: uint BT;
  2233                           ;AD.c: 65: ANSA1 = 1;
  2234                           
  2235                           ; Regs used in _GetBT: [wreg+fsr1l-status,0+pclath+cstack]
  2236  03C5  0023               	movlb	3	; select bank3
  2237  03C6  3004               	movlw	4
  2238  03C7  148C               	bsf	12,1
  2239                           
  2240                           ;AD.c: 66: ADCON0 = 0x04;
  2241  03C8  0021               	movlb	1	; select bank1
  2242  03C9  009D               	movwf	29	;volatile
  2243                           
  2244                           ;AD.c: 67: ADCON1 = 0xA0;
  2245  03CA  30A0               	movlw	160
  2246  03CB  009E               	movwf	30	;volatile
  2247                           
  2248                           ;AD.c: 68: BT = GetAD();
  2249  03CC  21A6               	fcall	_GetAD
  2250  03CD  0871               	movf	?_GetAD+1,w
  2251  03CE  00B7               	movwf	GetBT@BT+1
  2252  03CF  0870               	movf	?_GetAD,w
  2253  03D0  00B6               	movwf	GetBT@BT
  2254                           
  2255                           ;AD.c: 69: ANSA1 = 0;
  2256  03D1  0023               	movlb	3	; select bank3
  2257  03D2  108C               	bcf	12,1
  2258                           
  2259                           ;AD.c: 70: BT = 1048576/BT;
  2260  03D3  0020               	movlb	0	; select bank0
  2261  03D4  0836               	movf	GetBT@BT,w
  2262  03D5  00F0               	movwf	?___aldiv
  2263  03D6  0837               	movf	GetBT@BT+1,w
  2264  03D7  00F1               	movwf	?___aldiv+1
  2265  03D8  3010               	movlw	16
  2266  03D9  01F2               	clrf	?___aldiv+2
  2267  03DA  01F3               	clrf	?___aldiv+3
  2268  03DB  01F7               	clrf	?___aldiv+7
  2269  03DC  00F6               	movwf	?___aldiv+6
  2270  03DD  01F5               	clrf	?___aldiv+5
  2271  03DE  01F4               	clrf	?___aldiv+4
  2272  03DF  2234               	fcall	___aldiv
  2273  03E0  0871               	movf	?___aldiv+1,w
  2274  03E1  00B7               	movwf	GetBT@BT+1
  2275  03E2  0870               	movf	?___aldiv,w
  2276  03E3  00B6               	movwf	GetBT@BT
  2277                           
  2278                           ;AD.c: 71: return BT;
  2279  03E4  0837               	movf	GetBT@BT+1,w
  2280  03E5  00B5               	movwf	?_GetBT+1
  2281  03E6  0836               	movf	GetBT@BT,w
  2282  03E7  00B4               	movwf	?_GetBT
  2283  03E8  0008               	return
  2284  03E9                     __end_of_GetBT:	
  2285                           
  2286                           	psect	text479
  2287  04B0                     __ptext479:	
  2288 ;; =============== function _GetBT ends ============
  2289                           
  2290                           
  2291 ;; *************** function _GetHotV *****************
  2292 ;; Defined at:
  2293 ;;		line 51 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\AD.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  H               2    8[COMMON] unsigned int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  2    6[COMMON] unsigned int 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 1F/0
  2304 ;;		On exit  : 1F/3
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1
  2307 ;;      Params:         2       0       0
  2308 ;;      Locals:         2       0       0
  2309 ;;      Temps:          0       0       0
  2310 ;;      Totals:         4       0       0
  2311 ;;Total ram usage:        4 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    2
  2314 ;; This function calls:
  2315 ;;		_GetAD
  2316 ;; This function is called by:
  2317 ;;		_smoke_deal
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320  04B0                     _GetHotV:	
  2321                           
  2322                           ;AD.c: 52: uint H;
  2323                           ;AD.c: 54: ANSA0 = 1;
  2324                           
  2325                           ; Regs used in _GetHotV: [wreg+fsr1l-status,0+pclath+cstack]
  2326  04B0  0023               	movlb	3	; select bank3
  2327  04B1  140C               	bsf	12,0
  2328                           
  2329                           ;AD.c: 55: ADCON0 = 0x00;
  2330  04B2  0021               	movlb	1	; select bank1
  2331  04B3  019D               	clrf	29	;volatile
  2332                           
  2333                           ;AD.c: 56: ADCON1 = 0xA2;
  2334  04B4  30A2               	movlw	162
  2335  04B5  009E               	movwf	30	;volatile
  2336                           
  2337                           ;AD.c: 57: H = GetAD();
  2338  04B6  21A6               	fcall	_GetAD
  2339  04B7  0871               	movf	?_GetAD+1,w
  2340  04B8  00F9               	movwf	GetHotV@H+1
  2341  04B9  0870               	movf	?_GetAD,w
  2342  04BA  00F8               	movwf	GetHotV@H
  2343                           
  2344                           ;AD.c: 58: ANSA0 = 0;
  2345  04BB  0023               	movlb	3	; select bank3
  2346  04BC  100C               	bcf	12,0
  2347                           
  2348                           ;AD.c: 59: return H;
  2349  04BD  0879               	movf	GetHotV@H+1,w
  2350  04BE  00F7               	movwf	?_GetHotV+1
  2351  04BF  0878               	movf	GetHotV@H,w
  2352  04C0  00F6               	movwf	?_GetHotV
  2353  04C1  0008               	return
  2354  04C2                     __end_of_GetHotV:	
  2355                           
  2356                           	psect	text480
  2357  0378                     __ptext480:	
  2358 ;; =============== function _GetHotV ends ============
  2359                           
  2360                           
  2361 ;; *************** function _power *****************
  2362 ;; Defined at:
  2363 ;;		line 160 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  i               1    5[COMMON] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;		None               void
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, pclath, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 1F/0
  2374 ;;		On exit  : 1F/0
  2375 ;;		Unchanged: FFE00/0
  2376 ;; Data sizes:     COMMON   BANK0   BANK1
  2377 ;;      Params:         0       0       0
  2378 ;;      Locals:         1       0       0
  2379 ;;      Temps:          0       0       0
  2380 ;;      Totals:         1       0       0
  2381 ;;Total ram usage:        1 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    2
  2384 ;; This function calls:
  2385 ;;		_delay
  2386 ;; This function is called by:
  2387 ;;		_key_deal
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390  0378                     _power:	
  2391                           
  2392                           ;main.c: 162: if(run.poweron_bit)
  2393                           
  2394                           ; Regs used in _power: [wreg+status,2+status,0+pclath+cstack]
  2395  0378  1C63               	btfss	_run+1,0
  2396  0379  2B8A               	goto	l8015
  2397                           
  2398                           ;main.c: 163: {
  2399                           ;main.c: 164: RA4 = 0;
  2400  037A  120C               	bcf	12,4
  2401                           
  2402                           ;main.c: 165: RA5 = 0;
  2403  037B  128C               	bcf	12,5
  2404                           
  2405                           ;main.c: 166: for(i=0;i<6;i++)
  2406  037C  01F5               	clrf	power@i
  2407  037D                     l3195:	
  2408  037D  0064               	clrwdt	;#
  2409                           
  2410                           ;main.c: 170: RA4=~RA4;
  2411                           
  2412                           ;main.c: 171: RA5=~RA5;
  2413                           
  2414                           ;main.c: 172: delay(200);
  2415  037E  243B               	fcall	PL2	;call to abstracted procedure
  2416  037F  249C               	fcall	_delay
  2417  0380  3006               	movlw	6
  2418  0381  0AF5               	incf	power@i,f
  2419  0382  0275               	subwf	power@i,w
  2420  0383  1C03               	skipc
  2421  0384  2B7D               	goto	l3195
  2422                           
  2423                           ;main.c: 173: }
  2424                           ;main.c: 174: Cnt.Count = 0;
  2425  0385  01D6               	clrf	_Cnt+16
  2426  0386  01D7               	clrf	_Cnt+17
  2427                           
  2428                           ;main.c: 175: Cnt.value_led = 0;
  2429  0387  01CA               	clrf	_Cnt+4
  2430                           
  2431                           ;main.c: 176: run.poweron_bit = 0;
  2432  0388  1063               	bcf	_run+1,0
  2433                           
  2434                           ;main.c: 177: run.power_bit = 1;
  2435  0389  14E3               	bsf	_run+1,1
  2436  038A                     l8015:	
  2437                           
  2438                           ;main.c: 178: }
  2439                           ;main.c: 179: if(run.poweroff_bit)
  2440  038A  1FE2               	btfss	_run,7
  2441  038B  0008               	return
  2442                           
  2443                           ;main.c: 180: {
  2444                           ;main.c: 181: RA4 = 0;
  2445  038C  120C               	bcf	12,4
  2446                           
  2447                           ;main.c: 182: RA5 = 0;
  2448  038D  128C               	bcf	12,5
  2449                           
  2450                           ;main.c: 183: for(i=0;i<6;i++)
  2451  038E  01F5               	clrf	power@i
  2452  038F                     l3198:	
  2453  038F  0064               	clrwdt	;#
  2454                           
  2455                           ;main.c: 187: RA4=~RA4;
  2456                           
  2457                           ;main.c: 188: RA5=~RA5;
  2458                           
  2459                           ;main.c: 189: delay(200);
  2460  0390  243B               	fcall	PL2	;call to abstracted procedure
  2461  0391  249C               	fcall	_delay
  2462  0392  3006               	movlw	6
  2463  0393  0AF5               	incf	power@i,f
  2464  0394  0275               	subwf	power@i,w
  2465  0395  1C03               	skipc
  2466  0396  2B8F               	goto	l3198
  2467                           
  2468                           ;main.c: 190: }
  2469                           ;main.c: 191: Cnt.Count = 0;
  2470  0397  01D6               	clrf	_Cnt+16
  2471  0398  01D7               	clrf	_Cnt+17
  2472                           
  2473                           ;main.c: 192: run.smoke_bit= 0;
  2474  0399  1262               	bcf	_run,4
  2475                           
  2476                           ;main.c: 193: Cnt.value_led = 0;
  2477  039A  01CA               	clrf	_Cnt+4
  2478                           
  2479                           ;main.c: 194: run.poweroff_bit = 0;
  2480  039B  13E2               	bcf	_run,7
  2481                           
  2482                           ;main.c: 195: run.power_bit = 0;
  2483  039C  10E3               	bcf	_run+1,1
  2484                           
  2485                           ;main.c: 196: run.sleep_bit = 1;
  2486  039D  15E3               	bsf	_run+1,3
  2487  039E  0008               	return
  2488  039F                     __end_of_power:	
  2489                           
  2490                           	psect	text481
  2491  02A0                     __ptext481:	
  2492 ;; =============== function _power ends ============
  2493                           
  2494                           
  2495 ;; *************** function _warn_deal *****************
  2496 ;; Defined at:
  2497 ;;		line 229 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;		None
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  num             1    6[COMMON] unsigned char 
  2502 ;;  i               1    5[COMMON] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;		None               void
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 1C/0
  2509 ;;		On exit  : 1F/0
  2510 ;;		Unchanged: FFE00/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1
  2512 ;;      Params:         0       0       0
  2513 ;;      Locals:         2       0       0
  2514 ;;      Temps:          0       0       0
  2515 ;;      Totals:         2       0       0
  2516 ;;Total ram usage:        2 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    2
  2519 ;; This function calls:
  2520 ;;		_delay
  2521 ;; This function is called by:
  2522 ;;		_main
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525  02A0                     _warn_deal:	
  2526                           
  2527                           ;main.c: 230: if(run.warn_bit)
  2528                           
  2529                           ; Regs used in _warn_deal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2530  02A0  0020               	movlb	0	; select bank0
  2531  02A1  1DE2               	btfss	_run,3
  2532  02A2  0008               	return
  2533                           
  2534                           ;main.c: 231: {
  2535                           ;main.c: 232: uchar i;
  2536                           ;main.c: 233: uchar num;
  2537                           ;main.c: 234: RA5 = 0;
  2538  02A3  128C               	bcf	12,5
  2539                           
  2540                           ;main.c: 235: RA4 = 0;
  2541  02A4  120C               	bcf	12,4
  2542                           
  2543                           ;main.c: 236: RC3 = 0;
  2544  02A5  118E               	bcf	14,3
  2545                           
  2546                           ;main.c: 237: switch(Cnt.warn)
  2547  02A6  2AAE               	goto	l7961
  2548  02A7                     l7953:	
  2549  02A7  300A               	movlw	10
  2550  02A8  2AAC               	goto	L5
  2551  02A9                     l7955:	
  2552  02A9  3010               	movlw	16
  2553  02AA  2AAC               	goto	L5
  2554  02AB                     l7957:	
  2555  02AB  3006               	movlw	6
  2556  02AC                     L5:	
  2557  02AC  00F6               	movwf	warn_deal@num
  2558  02AD  2AB9               	goto	l7963
  2559  02AE                     l7961:	
  2560  02AE  084B               	movf	_Cnt+5,w
  2561                           
  2562                           ; Switch size 1, requested type "space"
  2563                           ; Number of cases is 3, Range of values is 1 to 3
  2564                           ; switch strategies available:
  2565                           ; Name         Instructions Cycles
  2566                           ; simple_byte           10     6 (average)
  2567                           ; direct_byte           15     9 (fixed)
  2568                           ; jumptable            263     9 (fixed)
  2569                           ;	Chosen strategy is simple_byte
  2570  02AF  3A01               	xorlw	1	; case 1
  2571  02B0  1903               	skipnz
  2572  02B1  2AA7               	goto	l7953
  2573  02B2  3A03               	xorlw	3	; case 2
  2574  02B3  1903               	skipnz
  2575  02B4  2AA9               	goto	l7955
  2576  02B5  3A01               	xorlw	1	; case 3
  2577  02B6  1903               	skipnz
  2578  02B7  2AAB               	goto	l7957
  2579  02B8  2AB9               	goto	l7963
  2580  02B9                     l7963:	
  2581                           
  2582                           ;main.c: 243: for(i=0;i<num;i++)
  2583  02B9  01F5               	clrf	warn_deal@i
  2584  02BA                     l7979:	
  2585  02BA  0876               	movf	warn_deal@num,w
  2586  02BB  0275               	subwf	warn_deal@i,w
  2587  02BC  1803               	btfsc	3,0
  2588  02BD  2AD0               	goto	l3221
  2589  02BE  0064               	clrwdt	;#
  2590                           
  2591                           ;main.c: 246: delay(200);
  2592  02BF  30C8               	movlw	200
  2593  02C0  00F0               	movwf	?_delay
  2594  02C1  01F1               	clrf	?_delay+1
  2595  02C2  249C               	fcall	_delay
  2596                           
  2597                           ;main.c: 247: if(Cnt.warn==1)
  2598  02C3  0020               	movlb	0	; select bank0
  2599  02C4  0B4B               	decfsz	_Cnt+5,w
  2600  02C5  2ACA               	goto	l7975
  2601                           
  2602                           ;main.c: 248: {
  2603                           ;main.c: 249: if(run.LEDB_bit)
  2604  02C6  1962               	btfsc	_run,2
  2605  02C7  2ACC               	goto	L6
  2606                           
  2607                           ;main.c: 251: else
  2608                           ;main.c: 252: RA4 = ~RA4;
  2609                           
  2610                           ;main.c: 250: RA5 = ~RA5;
  2611  02C8  3010               	movlw	16
  2612  02C9  2ACD               	goto	L7
  2613  02CA                     l7975:	
  2614                           
  2615                           ;main.c: 254: else
  2616                           ;main.c: 255: {
  2617                           ;main.c: 256: RA4=~RA4;
  2618  02CA  3010               	movlw	16
  2619  02CB  068C               	xorwf	12,f
  2620  02CC                     L6:	
  2621                           
  2622                           ;main.c: 257: RA5=~RA5;
  2623  02CC  3020               	movlw	32
  2624  02CD                     L7:	
  2625  02CD  068C               	xorwf	12,f
  2626  02CE  0AF5               	incf	warn_deal@i,f
  2627  02CF  2ABA               	goto	l7979
  2628  02D0                     l3221:	
  2629                           
  2630                           ;main.c: 258: }
  2631                           ;main.c: 259: }
  2632                           ;main.c: 260: RA4 = 0;
  2633  02D0  120C               	bcf	12,4
  2634                           
  2635                           ;main.c: 261: RA5 = 0;
  2636  02D1  128C               	bcf	12,5
  2637                           
  2638                           ;main.c: 262: run.finish1_bit = 1;
  2639  02D2  1564               	bsf	_run+2,2
  2640                           
  2641                           ;main.c: 263: run.check1_bit = 0;
  2642  02D3  1264               	bcf	_run+2,4
  2643                           
  2644                           ;main.c: 264: Cnt.value_led = 0;
  2645  02D4  01CA               	clrf	_Cnt+4
  2646                           
  2647                           ;main.c: 265: run.smoke_bit = 0;
  2648  02D5  1262               	bcf	_run,4
  2649                           
  2650                           ;main.c: 266: run.key = 0;
  2651  02D6  1362               	bcf	_run,6
  2652                           
  2653                           ;main.c: 267: run.warn_bit = 0;
  2654  02D7  11E2               	bcf	_run,3
  2655  02D8                     l3222:	
  2656                           ;main.c: 268: while(!RA3)
  2657                           
  2658  02D8  198C               	btfsc	12,3
  2659  02D9  0008               	return
  2660  02DA  0064               	clrwdt	;#
  2661                           
  2662                           ;main.c: 271: RC3 = 0;
  2663  02DB  0020               	movlb	0	; select bank0
  2664  02DC  118E               	bcf	14,3
  2665  02DD  2AD8               	goto	l3222
  2666  02DE                     __end_of_warn_deal:	
  2667                           
  2668                           	psect	text482
  2669  034A                     __ptext482:	
  2670 ;; =============== function _warn_deal ends ============
  2671                           
  2672                           
  2673 ;; *************** function _sleep_deal *****************
  2674 ;; Defined at:
  2675 ;;		line 68 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, status,2
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 1F/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1
  2689 ;;      Params:         0       0       0
  2690 ;;      Locals:         0       0       0
  2691 ;;      Temps:          0       0       0
  2692 ;;      Totals:         0       0       0
  2693 ;;Total ram usage:        0 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    1
  2696 ;; This function calls:
  2697 ;;		Nothing
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702  034A                     _sleep_deal:	
  2703                           
  2704                           ;main.c: 69: if(run.sleep_bit)
  2705                           
  2706                           ; Regs used in _sleep_deal: [wreg+status,2]
  2707  034A  0020               	movlb	0	; select bank0
  2708  034B  1DE3               	btfss	_run+1,3
  2709  034C  0008               	return
  2710                           
  2711                           ;main.c: 70: {
  2712                           ;main.c: 71: INTCON = 0x08;
  2713  034D  3008               	movlw	8
  2714  034E  008B               	movwf	11	;volatile
  2715                           
  2716                           ;main.c: 72: TMR1IE = 0;
  2717  034F  0021               	movlb	1	; select bank1
  2718  0350  1011               	bcf	17,0
  2719                           
  2720                           ;main.c: 73: TMR1ON = 0;
  2721  0351  0020               	movlb	0	; select bank0
  2722  0352  1018               	bcf	24,0
  2723                           
  2724                           ;main.c: 74: TRISC5 = 1;
  2725  0353  0021               	movlb	1	; select bank1
  2726  0354  168E               	bsf	14,5
  2727                           
  2728                           ;main.c: 75: TRISC3 = 1;
  2729  0355  158E               	bsf	14,3
  2730                           
  2731                           ;main.c: 76: PORTA = 0x00;
  2732  0356  0020               	movlb	0	; select bank0
  2733  0357  018C               	clrf	12	;volatile
  2734                           
  2735                           ;main.c: 77: PORTC = 0x00;
  2736  0358  018E               	clrf	14	;volatile
  2737                           
  2738                           ;main.c: 78: IOCAF = 0x00;
  2739  0359  0027               	movlb	7	; select bank7
  2740  035A  0193               	clrf	19	;volatile
  2741                           
  2742                           ;main.c: 79: IOCAP = 0x0D;
  2743  035B  300D               	movlw	13
  2744  035C  0091               	movwf	17	;volatile
  2745                           
  2746                           ;main.c: 80: IOCAN = 0x08;
  2747  035D  3008               	movlw	8
  2748  035E  0092               	movwf	18	;volatile
  2749                           
  2750                           ;main.c: 81: _nop();_nop();
  2751  035F  0000               	nop
  2752  0360  0000               	nop
  2753  0361  0063               	sleep	;#
  2754                           
  2755                           ;main.c: 83: _nop();_nop();
  2756  0362  0000               	nop
  2757  0363  0000               	nop
  2758                           
  2759                           ;main.c: 85: IOCAF = 0x00;
  2760  0364  0027               	movlb	7	; select bank7
  2761  0365  0193               	clrf	19	;volatile
  2762                           
  2763                           ;main.c: 86: IOCAP = 0x00;
  2764  0366  0191               	clrf	17	;volatile
  2765                           
  2766                           ;main.c: 87: IOCAN = 0x00;
  2767  0367  0192               	clrf	18	;volatile
  2768  0368  0064               	clrwdt	;#
  2769                           
  2770                           ;main.c: 89: TRISC5 = 0;
  2771  0369  0021               	movlb	1	; select bank1
  2772  036A  128E               	bcf	14,5
  2773                           
  2774                           ;main.c: 90: TRISC3 = 0;
  2775  036B  118E               	bcf	14,3
  2776                           
  2777                           ;main.c: 91: RC0 = 1;
  2778  036C  0020               	movlb	0	; select bank0
  2779  036D  30C0               	movlw	192
  2780  036E  140E               	bsf	14,0
  2781                           
  2782                           ;main.c: 92: INTCON = 0xC0;
  2783  036F  008B               	movwf	11	;volatile
  2784                           
  2785                           ;main.c: 93: TMR1IE = 1;
  2786  0370  0021               	movlb	1	; select bank1
  2787  0371  1411               	bsf	17,0
  2788                           
  2789                           ;main.c: 94: TMR1ON = 1;
  2790  0372  0020               	movlb	0	; select bank0
  2791  0373  1418               	bsf	24,0
  2792                           
  2793                           ;main.c: 95: Cnt.Count = 0;
  2794  0374  01D6               	clrf	_Cnt+16
  2795  0375  01D7               	clrf	_Cnt+17
  2796                           
  2797                           ;main.c: 96: run.sleep_bit = 0;
  2798  0376  11E3               	bcf	_run+1,3
  2799  0377  0008               	return
  2800  0378                     __end_of_sleep_deal:	
  2801                           
  2802                           	psect	text483
  2803  0428                     __ptext483:	
  2804 ;; =============== function _sleep_deal ends ============
  2805                           
  2806                           
  2807 ;; *************** function _powerInit_deal *****************
  2808 ;; Defined at:
  2809 ;;		line 49 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  i               1    5[COMMON] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;		None               void
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 17F/0
  2820 ;;		On exit  : 1F/0
  2821 ;;		Unchanged: FFE00/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1
  2823 ;;      Params:         0       0       0
  2824 ;;      Locals:         1       0       0
  2825 ;;      Temps:          0       0       0
  2826 ;;      Totals:         1       0       0
  2827 ;;Total ram usage:        1 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    2
  2830 ;; This function calls:
  2831 ;;		_delay
  2832 ;; This function is called by:
  2833 ;;		_main
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836  0428                     _powerInit_deal:	
  2837                           
  2838                           ;main.c: 51: RA4 = 0;
  2839                           
  2840                           ; Regs used in _powerInit_deal: [wreg+status,2+status,0+pclath+cstack]
  2841  0428  120C               	bcf	12,4
  2842                           
  2843                           ;main.c: 52: RA5 = 0;
  2844  0429  128C               	bcf	12,5
  2845                           
  2846                           ;main.c: 53: for(i=0;i<6;i++)
  2847  042A  01F5               	clrf	powerInit_deal@i
  2848  042B                     l3170:	
  2849  042B  0064               	clrwdt	;#
  2850                           
  2851                           ;main.c: 57: RA4=~RA4;
  2852                           
  2853                           ;main.c: 58: RA5=~RA5;
  2854                           
  2855                           ;main.c: 59: delay(200);
  2856  042C  243B               	fcall	PL2	;call to abstracted procedure
  2857  042D  249C               	fcall	_delay
  2858  042E  3006               	movlw	6
  2859  042F  0AF5               	incf	powerInit_deal@i,f
  2860  0430  0275               	subwf	powerInit_deal@i,w
  2861  0431  1C03               	skipc
  2862  0432  2C2B               	goto	l3170
  2863                           
  2864                           ;main.c: 60: }
  2865                           ;main.c: 61: Cnt.Count = 0;
  2866  0433  01D6               	clrf	_Cnt+16
  2867  0434  01D7               	clrf	_Cnt+17
  2868                           
  2869                           ;main.c: 62: run.power_bit = 1;
  2870  0435  14E3               	bsf	_run+1,1
  2871  0436                     l3172:	
  2872                           ;main.c: 63: while(!RA3)
  2873                           
  2874  0436  0020               	movlb	0	; select bank0
  2875  0437  198C               	btfsc	12,3
  2876  0438  0008               	return
  2877  0439  0064               	clrwdt	;#
  2878  043A  2C36               	goto	l3172
  2879  043B                     __end_of_powerInit_deal:	
  2880  043B                     PL2:	
  2881  043B  3010               	movlw	16
  2882  043C  0020               	movlb	0	; select bank0
  2883  043D  068C               	xorwf	12,f
  2884  043E  3020               	movlw	32
  2885  043F  068C               	xorwf	12,f
  2886  0440  30C8               	movlw	200
  2887  0441  00F0               	movwf	?_delay
  2888  0442  01F1               	clrf	?_delay+1
  2889  0443  0008               	return
  2890                           
  2891                           	psect	text484
  2892  01A6                     __ptext484:	
  2893 ;; =============== function _powerInit_deal ends ============
  2894                           
  2895                           
  2896 ;; *************** function _GetAD *****************
  2897 ;; Defined at:
  2898 ;;		line 11 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\AD.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  SumBuf         16    0[BANK0 ] unsigned int [8]
  2903 ;;  SumADC          2   16[BANK0 ] unsigned int 
  2904 ;;  i               1   19[BANK0 ] unsigned char 
  2905 ;;  t               1   18[BANK0 ] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  2    0[COMMON] unsigned int 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2910 ;; Tracked objects:
  2911 ;;		On entry : 1F/1
  2912 ;;		On exit  : 1F/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1
  2915 ;;      Params:         2       0       0
  2916 ;;      Locals:         0      20       0
  2917 ;;      Temps:          4       0       0
  2918 ;;      Totals:         6      20       0
  2919 ;;Total ram usage:       26 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    1
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_GetHotV
  2926 ;;		_GetBT
  2927 ;;		_GetIsense
  2928 ;;		_GetUsbI
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931  01A6                     _GetAD:	
  2932                           
  2933                           ; Regs used in _GetAD: [wreg+fsr1l-status,0]
  2934  01A6  0020               	movlb	0	; select bank0
  2935  01A7  01B2               	clrf	GetAD@t
  2936                           
  2937                           ;AD.c: 13: uint SumADC = 0;
  2938  01A8  01B0               	clrf	GetAD@SumADC
  2939  01A9  01B1               	clrf	GetAD@SumADC+1
  2940                           
  2941                           ;AD.c: 14: uint SumBuf[8];
  2942                           ;AD.c: 16: ADCON0bits.ADON = 1;
  2943  01AA  0021               	movlb	1	; select bank1
  2944  01AB  141D               	bsf	29,0	;volatile
  2945                           
  2946                           ;AD.c: 17: _nop();_nop();_nop();
  2947  01AC  0000               	nop
  2948  01AD  0000               	nop
  2949  01AE  0000               	nop
  2950                           
  2951                           ;AD.c: 18: _nop();_nop();_nop();
  2952  01AF  0000               	nop
  2953  01B0  0000               	nop
  2954  01B1  0000               	nop
  2955                           
  2956                           ;AD.c: 20: for(i=0;i<8-0;i++)
  2957  01B2  0020               	movlb	0	; select bank0
  2958  01B3  01B3               	clrf	GetAD@i
  2959  01B4                     l1545:	
  2960                           
  2961                           ;AD.c: 21: {
  2962                           ;AD.c: 22: ADCON0bits.GO= 1;
  2963  01B4  0021               	movlb	1	; select bank1
  2964  01B5  149D               	bsf	29,1	;volatile
  2965  01B6                     l1547:	
  2966                           ;AD.c: 23: while(ADCON0bits.GO) continue;
  2967                           
  2968  01B6  189D               	btfsc	29,1	;volatile
  2969  01B7  29B6               	goto	l1547
  2970                           
  2971                           ;AD.c: 24: SumBuf[i]=ADRESH*256 + ADRESL;
  2972  01B8  0020               	movlb	0	; select bank0
  2973  01B9  3533               	lslf	GetAD@i,w
  2974  01BA  3E20               	addlw	GetAD@SumBuf& (0+255)
  2975  01BB  0086               	movwf	6
  2976  01BC  0187               	clrf	7
  2977  01BD  0021               	movlb	1	; select bank1
  2978  01BE  081B               	movf	27,w	;volatile
  2979  01BF  3FC0               	movwi [0]fsr1
  2980  01C0  081C               	movf	28,w	;volatile
  2981  01C1  3FC1               	movwi [1]fsr1
  2982  01C2  222F               	fcall	PL5	;call to abstracted procedure
  2983  01C3  1C03               	skipc
  2984  01C4  29B4               	goto	l1545
  2985                           
  2986                           ;AD.c: 25: }
  2987                           ;AD.c: 26: ADCON0bits.ADON = 0;
  2988  01C5  0021               	movlb	1	; select bank1
  2989  01C6  101D               	bcf	29,0	;volatile
  2990                           
  2991                           ;AD.c: 28: for(i=1;i<8-0;i++)
  2992  01C7  0020               	movlb	0	; select bank0
  2993  01C8  01B3               	clrf	GetAD@i
  2994  01C9  0AB3               	incf	GetAD@i,f
  2995  01CA                     l7839:	
  2996                           
  2997                           ;AD.c: 29: for(t=0;t<8-i;t++)
  2998  01CA  01B2               	clrf	GetAD@t
  2999  01CB                     l7847:	
  3000  01CB  01F3               	clrf	??_GetAD+1
  3001  01CC  0833               	movf	GetAD@i,w
  3002  01CD  3C08               	sublw	8
  3003  01CE  00F2               	movwf	??_GetAD
  3004  01CF  1C03               	skipc
  3005  01D0  03F3               	decf	??_GetAD+1,f
  3006  01D1  0873               	movf	??_GetAD+1,w
  3007  01D2  3A80               	xorlw	128
  3008  01D3  3C80               	sublw	128
  3009  01D4  1D03               	skipz
  3010  01D5  29D8               	goto	u1365
  3011  01D6  0872               	movf	??_GetAD,w
  3012  01D7  0232               	subwf	GetAD@t,w
  3013  01D8                     u1365:	
  3014  01D8  1803               	btfsc	3,0
  3015  01D9  2A06               	goto	l7849
  3016                           
  3017                           ;AD.c: 30: {
  3018                           ;AD.c: 31: if (SumBuf[t+0] > SumBuf[t+1])
  3019  01DA  0020               	movlb	0	; select bank0
  3020  01DB  3532               	lslf	GetAD@t,w
  3021  01DC  2221               	fcall	PL3	;call to abstracted procedure
  3022  01DD  2229               	fcall	PL4	;call to abstracted procedure
  3023  01DE  00F4               	movwf	??_GetAD+2
  3024  01DF  3F41               	moviw [1]fsr1
  3025  01E0  00F5               	movwf	??_GetAD+3
  3026  01E1  0873               	movf	??_GetAD+1,w
  3027  01E2  0275               	subwf	??_GetAD+3,w
  3028  01E3  1D03               	skipz
  3029  01E4  29E7               	goto	u1355
  3030  01E5  0872               	movf	??_GetAD,w
  3031  01E6  0274               	subwf	??_GetAD+2,w
  3032  01E7                     u1355:	
  3033  01E7  1803               	skipnc
  3034  01E8  2A04               	goto	l7845
  3035                           
  3036                           ;AD.c: 32: {
  3037                           ;AD.c: 33: SumADC = SumBuf[t+0];
  3038  01E9  3532               	lslf	GetAD@t,w
  3039  01EA  3E20               	addlw	GetAD@SumBuf& (0+255)
  3040  01EB  0086               	movwf	6
  3041  01EC  0187               	clrf	7
  3042  01ED  3F40               	moviw [0]fsr1
  3043  01EE  00B0               	movwf	GetAD@SumADC
  3044  01EF  3F41               	moviw [1]fsr1
  3045  01F0  00B1               	movwf	GetAD@SumADC+1
  3046                           
  3047                           ;AD.c: 34: SumBuf[t+0] = SumBuf[t+1];
  3048  01F1  2229               	fcall	PL4	;call to abstracted procedure
  3049  01F2  00F2               	movwf	??_GetAD
  3050  01F3  3F41               	moviw [1]fsr1
  3051  01F4  00F3               	movwf	??_GetAD+1
  3052  01F5  3532               	lslf	GetAD@t,w
  3053  01F6  3E20               	addlw	GetAD@SumBuf& (0+255)
  3054  01F7  0086               	movwf	6
  3055  01F8  0872               	movf	??_GetAD,w
  3056  01F9  3FC0               	movwi [0]fsr1
  3057  01FA  0873               	movf	??_GetAD+1,w
  3058  01FB  3FC1               	movwi [1]fsr1
  3059                           
  3060                           ;AD.c: 35: SumBuf[t+1] = SumADC;
  3061  01FC  3532               	lslf	GetAD@t,w
  3062  01FD  3E02               	addlw	2
  3063  01FE  3E20               	addlw	GetAD@SumBuf& (0+255)
  3064  01FF  0086               	movwf	6
  3065  0200  0830               	movf	GetAD@SumADC,w
  3066  0201  3FC0               	movwi [0]fsr1
  3067  0202  0831               	movf	GetAD@SumADC+1,w
  3068  0203  3FC1               	movwi [1]fsr1
  3069  0204                     l7845:	
  3070  0204  0AB2               	incf	GetAD@t,f
  3071  0205  29CB               	goto	l7847
  3072  0206                     l7849:	
  3073  0206  222F               	fcall	PL5	;call to abstracted procedure
  3074  0207  1C03               	skipc
  3075  0208  29CA               	goto	l7839
  3076  0209  3002               	movlw	2
  3077                           
  3078                           ;AD.c: 36: }
  3079                           ;AD.c: 37: }
  3080                           ;AD.c: 39: SumADC = 0;
  3081  020A  01B0               	clrf	GetAD@SumADC
  3082  020B  01B1               	clrf	GetAD@SumADC+1
  3083                           
  3084                           ;AD.c: 40: for(i=2;i<8-2;i++)
  3085  020C  00B3               	movwf	GetAD@i
  3086  020D                     l7861:	
  3087                           
  3088                           ;AD.c: 41: {
  3089                           ;AD.c: 42: SumADC += SumBuf[i];
  3090  020D  3533               	lslf	GetAD@i,w
  3091  020E  2221               	fcall	PL3	;call to abstracted procedure
  3092  020F  0872               	movf	??_GetAD,w
  3093  0210  07B0               	addwf	GetAD@SumADC,f
  3094  0211  0873               	movf	??_GetAD+1,w
  3095  0212  3DB1               	addwfc	GetAD@SumADC+1,f
  3096  0213  3006               	movlw	6
  3097  0214  0AB3               	incf	GetAD@i,f
  3098  0215  0233               	subwf	GetAD@i,w
  3099  0216  1C03               	skipc
  3100  0217  2A0D               	goto	l7861
  3101                           
  3102                           ;AD.c: 43: }
  3103                           ;AD.c: 44: SumADC /= (8-4);
  3104  0218  36B1               	lsrf	GetAD@SumADC+1,f
  3105  0219  0CB0               	rrf	GetAD@SumADC,f
  3106  021A  36B1               	lsrf	GetAD@SumADC+1,f
  3107  021B  0CB0               	rrf	GetAD@SumADC,f
  3108                           
  3109                           ;AD.c: 46: return SumADC;
  3110  021C  0831               	movf	GetAD@SumADC+1,w
  3111  021D  00F1               	movwf	?_GetAD+1
  3112  021E  0830               	movf	GetAD@SumADC,w
  3113  021F  00F0               	movwf	?_GetAD
  3114  0220  0008               	return
  3115  0221                     __end_of_GetAD:	
  3116  0221                     PL3:	
  3117  0221  3E20               	addlw	GetAD@SumBuf& (0+255)
  3118  0222  0086               	movwf	6
  3119  0223  0187               	clrf	7
  3120  0224  3F40               	moviw [0]fsr1
  3121  0225  00F2               	movwf	??_GetAD
  3122  0226  3F41               	moviw [1]fsr1
  3123  0227  00F3               	movwf	??_GetAD+1
  3124  0228  0008               	return
  3125  0229                     PL4:	
  3126  0229  3532               	lslf	GetAD@t,w
  3127  022A  3E02               	addlw	2
  3128  022B  3E20               	addlw	GetAD@SumBuf& (0+255)
  3129  022C  0086               	movwf	6
  3130  022D  3F40               	moviw [0]fsr1
  3131  022E  0008               	return
  3132  022F                     PL5:	
  3133  022F  0020               	movlb	0	; select bank0
  3134  0230  3008               	movlw	8
  3135  0231  0AB3               	incf	GetAD@i,f
  3136  0232  0233               	subwf	GetAD@i,w
  3137  0233  0008               	return
  3138                           
  3139                           	psect	text485
  3140  0234                     __ptext485:	
  3141 ;; =============== function _GetAD ends ============
  3142                           
  3143                           
  3144 ;; *************** function ___aldiv *****************
  3145 ;; Defined at:
  3146 ;;		line 5 in file "d:\Program Files\HI-TECH Software\PICC\9.83\sources\aldiv.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  divisor         4    0[COMMON] long 
  3149 ;;  dividend        4    4[COMMON] long 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  quotient        4   10[COMMON] long 
  3152 ;;  sign            1    9[COMMON] unsigned char 
  3153 ;;  counter         1    8[COMMON] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  4    0[COMMON] long 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0
  3158 ;; Tracked objects:
  3159 ;;		On entry : 1F/0
  3160 ;;		On exit  : 1F/0
  3161 ;;		Unchanged: FFFE0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1
  3163 ;;      Params:         8       0       0
  3164 ;;      Locals:         6       0       0
  3165 ;;      Temps:          0       0       0
  3166 ;;      Totals:        14       0       0
  3167 ;;Total ram usage:       14 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    1
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_GetBT
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176  0234                     ___aldiv:	
  3177                           
  3178                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3179  0234  01F9               	clrf	___aldiv@sign
  3180  0235  1FF3               	btfss	___aldiv@divisor+3,7
  3181  0236  2A44               	goto	l6596
  3182  0237  09F0               	comf	___aldiv@divisor,f
  3183  0238  09F1               	comf	___aldiv@divisor+1,f
  3184  0239  09F2               	comf	___aldiv@divisor+2,f
  3185  023A  09F3               	comf	___aldiv@divisor+3,f
  3186  023B  0AF0               	incf	___aldiv@divisor,f
  3187  023C  1903               	skipnz
  3188  023D  0AF1               	incf	___aldiv@divisor+1,f
  3189  023E  1903               	skipnz
  3190  023F  0AF2               	incf	___aldiv@divisor+2,f
  3191  0240  1903               	skipnz
  3192  0241  0AF3               	incf	___aldiv@divisor+3,f
  3193  0242  01F9               	clrf	___aldiv@sign
  3194  0243  0AF9               	incf	___aldiv@sign,f
  3195  0244                     l6596:	
  3196  0244  1FF7               	btfss	___aldiv@dividend+3,7
  3197  0245  2A53               	goto	l7779
  3198  0246  09F4               	comf	___aldiv@dividend,f
  3199  0247  09F5               	comf	___aldiv@dividend+1,f
  3200  0248  09F6               	comf	___aldiv@dividend+2,f
  3201  0249  09F7               	comf	___aldiv@dividend+3,f
  3202  024A  0AF4               	incf	___aldiv@dividend,f
  3203  024B  1903               	skipnz
  3204  024C  0AF5               	incf	___aldiv@dividend+1,f
  3205  024D  1903               	skipnz
  3206  024E  0AF6               	incf	___aldiv@dividend+2,f
  3207  024F  1903               	skipnz
  3208  0250  0AF7               	incf	___aldiv@dividend+3,f
  3209  0251  3001               	movlw	1
  3210  0252  06F9               	xorwf	___aldiv@sign,f
  3211  0253                     l7779:	
  3212  0253  01FA               	clrf	___aldiv@quotient
  3213  0254  01FB               	clrf	___aldiv@quotient+1
  3214  0255  01FC               	clrf	___aldiv@quotient+2
  3215  0256  01FD               	clrf	___aldiv@quotient+3
  3216  0257  0873               	movf	___aldiv@divisor+3,w
  3217  0258  0472               	iorwf	___aldiv@divisor+2,w
  3218  0259  0471               	iorwf	___aldiv@divisor+1,w
  3219  025A  0470               	iorwf	___aldiv@divisor,w
  3220  025B  1903               	skipnz
  3221  025C  2A89               	goto	l7801
  3222  025D  01F8               	clrf	___aldiv@counter
  3223  025E                     L8:	
  3224  025E  0AF8               	incf	___aldiv@counter,f
  3225  025F  1BF3               	btfsc	___aldiv@divisor+3,7
  3226  0260  2A66               	goto	l7789
  3227  0261  35F0               	lslf	___aldiv@divisor,f
  3228  0262  0DF1               	rlf	___aldiv@divisor+1,f
  3229  0263  0DF2               	rlf	___aldiv@divisor+2,f
  3230  0264  0DF3               	rlf	___aldiv@divisor+3,f
  3231  0265  2A5E               	goto	L8
  3232  0266                     l7789:	
  3233  0266  35FA               	lslf	___aldiv@quotient,f
  3234  0267  0DFB               	rlf	___aldiv@quotient+1,f
  3235  0268  0DFC               	rlf	___aldiv@quotient+2,f
  3236  0269  0DFD               	rlf	___aldiv@quotient+3,f
  3237  026A  0873               	movf	___aldiv@divisor+3,w
  3238  026B  0277               	subwf	___aldiv@dividend+3,w
  3239  026C  1D03               	skipz
  3240  026D  2A78               	goto	u1305
  3241  026E  0872               	movf	___aldiv@divisor+2,w
  3242  026F  0276               	subwf	___aldiv@dividend+2,w
  3243  0270  1D03               	skipz
  3244  0271  2A78               	goto	u1305
  3245  0272  0871               	movf	___aldiv@divisor+1,w
  3246  0273  0275               	subwf	___aldiv@dividend+1,w
  3247  0274  1D03               	skipz
  3248  0275  2A78               	goto	u1305
  3249  0276  0870               	movf	___aldiv@divisor,w
  3250  0277  0274               	subwf	___aldiv@dividend,w
  3251  0278                     u1305:	
  3252  0278  1C03               	skipc
  3253  0279  2A83               	goto	l7797
  3254  027A  0870               	movf	___aldiv@divisor,w
  3255  027B  02F4               	subwf	___aldiv@dividend,f
  3256  027C  0871               	movf	___aldiv@divisor+1,w
  3257  027D  3BF5               	subwfb	___aldiv@dividend+1,f
  3258  027E  0872               	movf	___aldiv@divisor+2,w
  3259  027F  3BF6               	subwfb	___aldiv@dividend+2,f
  3260  0280  0873               	movf	___aldiv@divisor+3,w
  3261  0281  3BF7               	subwfb	___aldiv@dividend+3,f
  3262  0282  147A               	bsf	___aldiv@quotient,0
  3263  0283                     l7797:	
  3264  0283  36F3               	lsrf	___aldiv@divisor+3,f
  3265  0284  0CF2               	rrf	___aldiv@divisor+2,f
  3266  0285  0CF1               	rrf	___aldiv@divisor+1,f
  3267  0286  0CF0               	rrf	___aldiv@divisor,f
  3268  0287  0BF8               	decfsz	___aldiv@counter,f
  3269  0288  2A66               	goto	l7789
  3270  0289                     l7801:	
  3271  0289  0879               	movf	___aldiv@sign,w
  3272  028A  1903               	btfsc	3,2
  3273  028B  2A97               	goto	l7805
  3274  028C  09FA               	comf	___aldiv@quotient,f
  3275  028D  09FB               	comf	___aldiv@quotient+1,f
  3276  028E  09FC               	comf	___aldiv@quotient+2,f
  3277  028F  09FD               	comf	___aldiv@quotient+3,f
  3278  0290  0AFA               	incf	___aldiv@quotient,f
  3279  0291  1903               	skipnz
  3280  0292  0AFB               	incf	___aldiv@quotient+1,f
  3281  0293  1903               	skipnz
  3282  0294  0AFC               	incf	___aldiv@quotient+2,f
  3283  0295  1903               	skipnz
  3284  0296  0AFD               	incf	___aldiv@quotient+3,f
  3285  0297                     l7805:	
  3286  0297  087D               	movf	___aldiv@quotient+3,w
  3287  0298  00F3               	movwf	?___aldiv+3
  3288  0299  087C               	movf	___aldiv@quotient+2,w
  3289  029A  00F2               	movwf	?___aldiv+2
  3290  029B  087B               	movf	___aldiv@quotient+1,w
  3291  029C  00F1               	movwf	?___aldiv+1
  3292  029D  087A               	movf	___aldiv@quotient,w
  3293  029E  00F0               	movwf	?___aldiv
  3294  029F  0008               	return
  3295  02A0                     __end_of___aldiv:	
  3296                           
  3297                           	psect	text486
  3298  045E                     __ptext486:	
  3299 ;; =============== function ___aldiv ends ============
  3300                           
  3301                           
  3302 ;; *************** function _HOTPWM *****************
  3303 ;; Defined at:
  3304 ;;		line 6 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\PWM.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg, status,2
  3313 ;; Tracked objects:
  3314 ;;		On entry : 1F/0
  3315 ;;		On exit  : 1F/0
  3316 ;;		Unchanged: FFFE0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1
  3318 ;;      Params:         0       0       0
  3319 ;;      Locals:         0       0       0
  3320 ;;      Temps:          0       0       0
  3321 ;;      Totals:         0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_charge_deal
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331  045E                     _HOTPWM:	
  3332                           
  3333                           ;PWM.c: 7: TRISC3 = 1;
  3334                           
  3335                           ; Regs used in _HOTPWM: [wreg+status,2]
  3336  045E  0021               	movlb	1	; select bank1
  3337  045F  307C               	movlw	124
  3338  0460  158E               	bsf	14,3
  3339                           
  3340                           ;PWM.c: 8: PR2 = 124;
  3341  0461  0020               	movlb	0	; select bank0
  3342  0462  009B               	movwf	27	;volatile
  3343                           
  3344                           ;PWM.c: 9: PWM2CON = 0xE0;
  3345  0463  30E0               	movlw	224
  3346  0464  002C               	movlb	12	; select bank12
  3347  0465  0096               	movwf	22	;volatile
  3348                           
  3349                           ;PWM.c: 10: PWM2DCH = 0x7E;
  3350  0466  307E               	movlw	126
  3351  0467  0095               	movwf	21	;volatile
  3352                           
  3353                           ;PWM.c: 11: PWM2DCL = 0x00;
  3354  0468  0194               	clrf	20	;volatile
  3355                           
  3356                           ;PWM.c: 12: TMR2 = 0;
  3357  0469  0020               	movlb	0	; select bank0
  3358  046A  019A               	clrf	26	;volatile
  3359                           
  3360                           ;PWM.c: 13: T2CON = 0x02;
  3361  046B  3002               	movlw	2
  3362  046C  009C               	movwf	28	;volatile
  3363                           
  3364                           ;PWM.c: 14: TMR2IF = 0;
  3365  046D  1091               	bcf	17,1
  3366                           
  3367                           ;PWM.c: 15: TRISC3 = 0;
  3368  046E  0021               	movlb	1	; select bank1
  3369  046F  118E               	bcf	14,3
  3370                           
  3371                           ;PWM.c: 16: TMR2ON = 1;
  3372  0470  0020               	movlb	0	; select bank0
  3373  0471  151C               	bsf	28,2
  3374  0472  0008               	return
  3375  0473                     __end_of_HOTPWM:	
  3376                           
  3377                           	psect	text487
  3378  0473                     __ptext487:	
  3379 ;; =============== function _HOTPWM ends ============
  3380                           
  3381                           
  3382 ;; *************** function _USBPWM *****************
  3383 ;; Defined at:
  3384 ;;		line 20 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\PWM.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, status,2
  3393 ;; Tracked objects:
  3394 ;;		On entry : 1F/0
  3395 ;;		On exit  : 1F/0
  3396 ;;		Unchanged: FFFE0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1
  3398 ;;      Params:         0       0       0
  3399 ;;      Locals:         0       0       0
  3400 ;;      Temps:          0       0       0
  3401 ;;      Totals:         0       0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_charge_deal
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411  0473                     _USBPWM:	
  3412                           
  3413                           ;PWM.c: 21: TRISC5 = 1;
  3414                           
  3415                           ; Regs used in _USBPWM: [wreg+status,2]
  3416  0473  0021               	movlb	1	; select bank1
  3417  0474  307C               	movlw	124
  3418  0475  168E               	bsf	14,5
  3419                           
  3420                           ;PWM.c: 22: PR2 = 124;
  3421  0476  0020               	movlb	0	; select bank0
  3422  0477  009B               	movwf	27	;volatile
  3423                           
  3424                           ;PWM.c: 23: PWM1CON = 0xE0;
  3425  0478  30E0               	movlw	224
  3426  0479  002C               	movlb	12	; select bank12
  3427  047A  0093               	movwf	19	;volatile
  3428                           
  3429                           ;PWM.c: 24: PWM1DCH = 0x7E;
  3430  047B  307E               	movlw	126
  3431  047C  0092               	movwf	18	;volatile
  3432                           
  3433                           ;PWM.c: 25: PWM1DCL = 0x00;
  3434  047D  0191               	clrf	17	;volatile
  3435                           
  3436                           ;PWM.c: 26: TMR2 = 0;
  3437  047E  0020               	movlb	0	; select bank0
  3438  047F  019A               	clrf	26	;volatile
  3439                           
  3440                           ;PWM.c: 27: T2CON = 0x02;
  3441  0480  3002               	movlw	2
  3442  0481  009C               	movwf	28	;volatile
  3443                           
  3444                           ;PWM.c: 28: TMR2IF = 0;
  3445  0482  1091               	bcf	17,1
  3446                           
  3447                           ;PWM.c: 29: TRISC5 = 0;
  3448  0483  0021               	movlb	1	; select bank1
  3449  0484  128E               	bcf	14,5
  3450                           
  3451                           ;PWM.c: 30: TMR2ON = 1;
  3452  0485  0020               	movlb	0	; select bank0
  3453  0486  151C               	bsf	28,2
  3454  0487  0008               	return
  3455  0488                     __end_of_USBPWM:	
  3456                           
  3457                           	psect	text488
  3458  039F                     __ptext488:	
  3459 ;; =============== function _USBPWM ends ============
  3460                           
  3461                           
  3462 ;; *************** function _Init *****************
  3463 ;; Defined at:
  3464 ;;		line 55 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\Register.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;		None               void
  3471 ;; Registers used:
  3472 ;;		wreg, status,2
  3473 ;; Tracked objects:
  3474 ;;		On entry : 17F/0
  3475 ;;		On exit  : 17F/0
  3476 ;;		Unchanged: FFE80/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1
  3478 ;;      Params:         0       0       0
  3479 ;;      Locals:         0       0       0
  3480 ;;      Temps:          0       0       0
  3481 ;;      Totals:         0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    1
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_main
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491  039F                     _Init:	
  3492                           
  3493                           ;Register.c: 56: TRISA = 0x0F;
  3494                           
  3495                           ; Regs used in _Init: [wreg+status,2]
  3496  039F  300F               	movlw	15
  3497  03A0  0021               	movlb	1	; select bank1
  3498  03A1  008C               	movwf	12	;volatile
  3499                           
  3500                           ;Register.c: 57: TRISC = 0x06;
  3501  03A2  3006               	movlw	6
  3502  03A3  008E               	movwf	14	;volatile
  3503                           
  3504                           ;Register.c: 58: PORTA = 0x00;
  3505  03A4  0020               	movlb	0	; select bank0
  3506  03A5  018C               	clrf	12	;volatile
  3507                           
  3508                           ;Register.c: 59: PORTC = 0x01;
  3509  03A6  3001               	movlw	1
  3510  03A7  008E               	movwf	14	;volatile
  3511                           
  3512                           ;Register.c: 60: ANSELA = 0x02;
  3513  03A8  3002               	movlw	2
  3514  03A9  0023               	movlb	3	; select bank3
  3515  03AA  008C               	movwf	12	;volatile
  3516                           
  3517                           ;Register.c: 61: ANSELC = 0x06;
  3518  03AB  3006               	movlw	6
  3519  03AC  008E               	movwf	14	;volatile
  3520                           
  3521                           ;Register.c: 62: ADCON0 = 0x00;
  3522  03AD  0021               	movlb	1	; select bank1
  3523  03AE  019D               	clrf	29	;volatile
  3524                           
  3525                           ;Register.c: 63: ADCON1 = 0x00;
  3526  03AF  019E               	clrf	30	;volatile
  3527                           
  3528                           ;Register.c: 64: VREGCON = 0x03;
  3529  03B0  3003               	movlw	3
  3530  03B1  0023               	movlb	3	; select bank3
  3531  03B2  0097               	movwf	23	;volatile
  3532                           
  3533                           ;Register.c: 65: T1CON = 0x11;
  3534  03B3  3011               	movlw	17
  3535  03B4  0020               	movlb	0	; select bank0
  3536  03B5  0098               	movwf	24	;volatile
  3537                           
  3538                           ;Register.c: 67: OSCCON = 0x72;
  3539  03B6  3072               	movlw	114
  3540  03B7  0021               	movlb	1	; select bank1
  3541  03B8  0099               	movwf	25	;volatile
  3542                           
  3543                           ;Register.c: 69: INTCON = 0xC0;
  3544  03B9  30C0               	movlw	192
  3545  03BA  008B               	movwf	11	;volatile
  3546                           
  3547                           ;Register.c: 70: TMR1L = (char)Cnt.Reload;
  3548  03BB  0020               	movlb	0	; select bank0
  3549  03BC  0854               	movf	_Cnt+14,w
  3550  03BD  0096               	movwf	22	;volatile
  3551                           
  3552                           ;Register.c: 71: TMR1H = (char)(Cnt.Reload>>8);
  3553  03BE  0855               	movf	_Cnt+15,w
  3554  03BF  0097               	movwf	23	;volatile
  3555                           
  3556                           ;Register.c: 72: TMR1IE = 1;
  3557  03C0  0021               	movlb	1	; select bank1
  3558  03C1  1411               	bsf	17,0
  3559                           
  3560                           ;Register.c: 73: TMR1ON = 1;
  3561  03C2  0020               	movlb	0	; select bank0
  3562  03C3  1418               	bsf	24,0
  3563  03C4  0008               	return
  3564  03C5                     __end_of_Init:	
  3565                           
  3566                           	psect	text489
  3567  02DE                     __ptext489:	
  3568 ;; =============== function _Init ends ============
  3569                           
  3570                           
  3571 ;; *************** function _Variates *****************
  3572 ;; Defined at:
  3573 ;;		line 5 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\Register.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;		None
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;		None               void
  3580 ;; Registers used:
  3581 ;;		wreg, status,2
  3582 ;; Tracked objects:
  3583 ;;		On entry : 17F/0
  3584 ;;		On exit  : 17F/0
  3585 ;;		Unchanged: FFE80/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1
  3587 ;;      Params:         0       0       0
  3588 ;;      Locals:         0       0       0
  3589 ;;      Temps:          0       0       0
  3590 ;;      Totals:         0       0       0
  3591 ;;Total ram usage:        0 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_main
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600  02DE                     _Variates:	
  3601  02DE  3031               	movlw	49
  3602                           
  3603                           ;Register.c: 6: run.press_bit = 0;
  3604                           
  3605                           ; Regs used in _Variates: [wreg+status,2]
  3606  02DF  1163               	bcf	_run+1,2
  3607                           
  3608                           ;Register.c: 7: run.sleep_bit = 0;
  3609  02E0  11E3               	bcf	_run+1,3
  3610                           
  3611                           ;Register.c: 8: run.power_bit = 0;
  3612  02E1  10E3               	bcf	_run+1,1
  3613                           
  3614                           ;Register.c: 9: run.poweroff_bit = 0;
  3615  02E2  13E2               	bcf	_run,7
  3616                           
  3617                           ;Register.c: 10: run.poweron_bit = 0;
  3618  02E3  1063               	bcf	_run+1,0
  3619                           
  3620                           ;Register.c: 11: run.key = 0;
  3621  02E4  1362               	bcf	_run,6
  3622                           
  3623                           ;Register.c: 12: run.smoke_bit = 0;
  3624  02E5  1262               	bcf	_run,4
  3625                           
  3626                           ;Register.c: 13: run.overpress_bit = 0;
  3627  02E6  12E2               	bcf	_run,5
  3628                           
  3629                           ;Register.c: 14: run.warn_bit = 0;
  3630  02E7  11E2               	bcf	_run,3
  3631                           
  3632                           ;Register.c: 15: run.LEDB_bit = 0;
  3633  02E8  1162               	bcf	_run,2
  3634                           
  3635                           ;Register.c: 16: run.show_bit = 0;
  3636  02E9  10E2               	bcf	_run,1
  3637                           
  3638                           ;Register.c: 17: run.close_bit = 0;
  3639  02EA  1062               	bcf	_run,0
  3640                           
  3641                           ;Register.c: 18: run.USB_bit = 0;
  3642  02EB  1263               	bcf	_run+1,4
  3643                           
  3644                           ;Register.c: 19: run.sec_bit = 0;
  3645  02EC  12E3               	bcf	_run+1,5
  3646                           
  3647                           ;Register.c: 20: run.finish_bit = 0;
  3648  02ED  13E3               	bcf	_run+1,7
  3649                           
  3650                           ;Register.c: 21: run.sec2_bit = 0;
  3651  02EE  1064               	bcf	_run+2,0
  3652                           
  3653                           ;Register.c: 22: run.HOT_bit = 0;
  3654  02EF  10E4               	bcf	_run+2,1
  3655                           
  3656                           ;Register.c: 23: run.finish1_bit = 0;
  3657  02F0  1164               	bcf	_run+2,2
  3658                           
  3659                           ;Register.c: 24: run.wait_bit = 0;
  3660  02F1  11E4               	bcf	_run+2,3
  3661                           
  3662                           ;Register.c: 25: run.check1_bit = 0;
  3663  02F2  1264               	bcf	_run+2,4
  3664                           
  3665                           ;Register.c: 26: run.over_bit = 0;
  3666  02F3  1364               	bcf	_run+2,6
  3667                           
  3668                           ;Register.c: 27: run.finish2 = 0;
  3669  02F4  13E4               	bcf	_run+2,7
  3670                           
  3671                           ;Register.c: 28: run.lock_bit = 0;
  3672  02F5  1065               	bcf	_run+3,0
  3673                           
  3674                           ;Register.c: 29: run.complete = 0;
  3675  02F6  10E5               	bcf	_run+3,1
  3676                           
  3677                           ;Register.c: 32: Cnt.presstime = 0;
  3678  02F7  01CF               	clrf	_Cnt+9
  3679                           
  3680                           ;Register.c: 33: Cnt.Reload = 0xFFFF - (int)975+1;
  3681  02F8  00D4               	movwf	_Cnt+14
  3682  02F9  30FC               	movlw	252
  3683  02FA  00D5               	movwf	_Cnt+15
  3684                           
  3685                           ;Register.c: 35: Cnt.warn = 0;
  3686  02FB  01CB               	clrf	_Cnt+5
  3687                           
  3688                           ;Register.c: 36: Cnt.Count = 0;
  3689  02FC  01D6               	clrf	_Cnt+16
  3690  02FD  01D7               	clrf	_Cnt+17
  3691                           
  3692                           ;Register.c: 37: Cnt.xnum = 0;
  3693  02FE  01CD               	clrf	_Cnt+7
  3694  02FF  01CE               	clrf	_Cnt+8
  3695                           
  3696                           ;Register.c: 38: Cnt.keydn = 0;
  3697  0300  01CC               	clrf	_Cnt+6
  3698                           
  3699                           ;Register.c: 39: Cnt.temp1 = 0;
  3700  0301  01D0               	clrf	_Cnt+10
  3701  0302  01D1               	clrf	_Cnt+11
  3702                           
  3703                           ;Register.c: 40: Cnt.temp2 = 0;
  3704  0303  01D2               	clrf	_Cnt+12
  3705  0304  01D3               	clrf	_Cnt+13
  3706                           
  3707                           ;Register.c: 41: Cnt.LEDcount = 0;
  3708  0305  01C8               	clrf	_Cnt+2
  3709                           
  3710                           ;Register.c: 42: Cnt.LEDtemp = 0;
  3711  0306  01C9               	clrf	_Cnt+3
  3712                           
  3713                           ;Register.c: 43: Cnt.ChgCount = 0;
  3714  0307  01D8               	clrf	_Cnt+18
  3715  0308  01D9               	clrf	_Cnt+19
  3716                           
  3717                           ;Register.c: 44: Cnt.Chgdelay = 0;
  3718  0309  01DA               	clrf	_Cnt+20
  3719  030A  01DB               	clrf	_Cnt+21
  3720                           
  3721                           ;Register.c: 45: Cnt.Check = 0;
  3722  030B  01DC               	clrf	_Cnt+22
  3723  030C  01DD               	clrf	_Cnt+23
  3724                           
  3725                           ;Register.c: 46: Cnt.Chgdelay1 = 0;
  3726  030D  01DE               	clrf	_Cnt+24
  3727  030E  01DF               	clrf	_Cnt+25
  3728                           
  3729                           ;Register.c: 47: Cnt.waitCount = 0;
  3730  030F  01E0               	clrf	_Cnt+26
  3731  0310  01E1               	clrf	_Cnt+27
  3732                           
  3733                           ;Register.c: 48: Cnt.value_led = 0;
  3734  0311  01CA               	clrf	_Cnt+4
  3735                           
  3736                           ;Register.c: 49: Cnt.DelayTime = 0;
  3737  0312  01C6               	clrf	_Cnt
  3738  0313  01C7               	clrf	_Cnt+1
  3739  0314  0008               	return
  3740  0315                     __end_of_Variates:	
  3741                           
  3742                           	psect	text490
  3743  049C                     __ptext490:	
  3744 ;; =============== function _Variates ends ============
  3745                           
  3746                           
  3747 ;; *************** function _delay *****************
  3748 ;; Defined at:
  3749 ;;		line 12 in file "D:\DATA\PROJECT\TPS-050040BCA-00_A-SV101\Source\main.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  nms             2    0[COMMON] unsigned int 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  i               2    2[COMMON] unsigned int 
  3754 ;;  t               1    4[COMMON] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;		None               void
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: FFFFF/0
  3763 ;; Data sizes:     COMMON   BANK0   BANK1
  3764 ;;      Params:         2       0       0
  3765 ;;      Locals:         3       0       0
  3766 ;;      Temps:          0       0       0
  3767 ;;      Totals:         5       0       0
  3768 ;;Total ram usage:        5 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    1
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_powerInit_deal
  3775 ;;		_power
  3776 ;;		_smoke_deal
  3777 ;;		_warn_deal
  3778 ;;		_charge_deal
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781  049C                     _delay:	
  3782                           
  3783                           ;main.c: 14: uint i;
  3784                           ;main.c: 15: for(i=0;i<nms;i++)
  3785                           
  3786                           ; Regs used in _delay: [wreg+status,2+status,0]
  3787  049C  01F2               	clrf	delay@i
  3788  049D  01F3               	clrf	delay@i+1
  3789  049E                     l7621:	
  3790  049E  0871               	movf	delay@nms+1,w
  3791  049F  0273               	subwf	delay@i+1,w
  3792  04A0  1D03               	skipz
  3793  04A1  2CA4               	goto	u1005
  3794  04A2  0870               	movf	delay@nms,w
  3795  04A3  0272               	subwf	delay@i,w
  3796  04A4                     u1005:	
  3797  04A4  1803               	btfsc	3,0
  3798  04A5  0008               	return
  3799                           
  3800                           ;main.c: 16: for(t=0;t<250;t++);
  3801  04A6  01F4               	clrf	delay@t
  3802  04A7                     l7615:	
  3803  04A7  30FA               	movlw	250
  3804  04A8  0AF4               	incf	delay@t,f
  3805  04A9  0274               	subwf	delay@t,w
  3806  04AA  1C03               	skipc
  3807  04AB  2CA7               	goto	l7615
  3808  04AC  0AF2               	incf	delay@i,f
  3809  04AD  1903               	skipnz
  3810  04AE  0AF3               	incf	delay@i+1,f
  3811  04AF  2C9E               	goto	l7621
  3812  04B0                     __end_of_delay:	


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Nov 03 11:25:17 2015

        ?_powerInit_deal 0070                      _RA0 0060                      _RA2 0062  
                    _RA3 0063                      _RC0 0070                      _RA4 0064  
                    _RA5 0065                      _RC3 0073                      _RC4 0074  
                    _RC5 0075                      _PR2 001B                      _Cnt 0046  
           warn_deal@num 0076                      _itr 0004                      _run 0062  
                    wreg 0009                     l3221 02D0                     l3222 02D8  
                   l3161 0000                     l1545 01B4                     l1561 0000  
                   l3170 042B                     l1547 01B6                     l3172 0436  
                   l1564 0000                     l3252 0124                     l3244 00D3  
                   l1573 0000                     l3237 00A0                     l1558 0000  
                   l3262 017F                     l3175 0000                     l1567 0000  
                   l3263 0181                     l3247 0125                     l3264 0185  
                   l3256 0140                     l3248 0101                     l3265 019B  
                   l3257 014A                     l3249 0100                     l3186 0331  
                   l3195 037D                     l3198 038F                     l8001 0000  
                   l8011 0000                     l8003 0000                     l8013 0000  
                   l8005 0000                     l8101 0327                     l4815 0000  
                   l8031 0000                     l8007 0000                     l8015 038A  
                   l8111 0332                     l8103 0328                     l8041 0000  
                   l8025 0000                     l8121 0338                     l4818 0000  
                   l8035 0000                     l8027 0000                     l8019 0000  
                   l8051 0000                     l8043 0000                     l8131 0000  
                   l8107 0000                     l8115 0333                     l8211 0000  
                   l6365 0000                     l8037 0000                     l8029 0000  
                   l8053 0000                     l8045 0000                     l8061 0000  
                   l8133 0000                     l8141 0000                     l8301 012C  
                   l8221 0000                     l8213 00AE                     l6606 0000  
                   l8039 0000                     l8047 0000                     l8063 0000  
                   l8071 0000                     l8127 0000                     l8151 0000  
                   l8143 0000                     l8135 0000                     l8231 0000  
                   l8223 0000                     l8207 0000                     l6368 0000  
                   l8049 0000                     l8065 0000                     l8057 0000  
                   l8073 0000                     l8129 0346                     l8145 0000  
                   l8137 0000                     l8161 0000                     l8321 0000  
                   l8305 0000                     l8241 0000                     l8225 0000  
                   l8209 00AC                     l8401 0000                     l8067 0000  
                   l8059 0000                     l8075 0000                     l8083 0000  
                   l8147 0000                     l8139 0000                     l8163 0453  
                   l8155 0000                     l8171 0000                     l8331 0000  
                   l8323 0000                     l8307 0132                     l8251 0000  
                   l8235 0000                     l8227 0000                     l8219 00AF  
                   l8403 0000                     l7621 049E                     l8077 0000  
                   l8093 0000                     l8149 0000                     l8157 0000  
                   l8181 0000                     l8341 0000                     l8325 0000  
                   l8309 0000                     l8245 0000                     l8229 0000  
                   l8253 00D7                     l8405 0000                     ?_itr 0070  
                   l7615 04A7                     l7607 0000                     l7631 0000  
                   l7623 0000                     l6831 0000                     l8079 0000  
                   l8095 0000                     l8087 0000                     l8167 0455  
                   l8183 0000                     l8343 0000                     l8327 0000  
                   l8271 0000                     l8263 0000                     l8255 0000  
                   l8247 0000                     l8239 0000                     l7617 0000  
                   l7641 0000                     l7633 0000                     l7625 0000  
                   l6841 0000                     l6833 0000                     l7801 0289  
                   l8097 0000                     l8185 041A                     l8353 0000  
                   l8345 0000                     l8337 0157                     l8329 0000  
                   l8281 0000                     l8265 0000                     l8249 0000  
                   l8193 0000                     l7651 0000                     l7643 0000  
                   l7635 0000                     l7627 0000                     l6851 0000  
                   l6843 0000                     l6835 0000                     l7803 0000  
                   l7811 0000                     l8179 0000                     l8371 018E  
                   l8347 0000                     l8339 0000                     l8283 0000  
                   l8275 0000                     l8267 0000                     l6596 0244  
                   l7653 0000                     l7645 0000                     l7637 0000  
                   l7629 0000                     l6853 0000                     l6845 0000  
                   l6837 0000                     l7661 0000                     l7805 0297  
                   l7821 0000                     l7813 0000                     l7901 0000  
                   l8189 0000                     l8381 0000                     l8349 0000  
                   l8357 0174                     l8293 0000                     l8285 0000  
                   l8277 0000                     l8269 0000                     l7655 0000  
                   l7647 0000                     l7639 0000                     l6855 0000  
                   l6847 0000                     l6839 0000                     l7671 0000  
                   l7663 0000                     l7831 0000                     l7823 0000  
                   l7815 0000                     l7911 0000                     l7903 0000  
                   l8391 0000                     l8383 0000                     l8295 0000  
                   l8287 0000                     l7657 0000                     l7649 0000  
                   l6849 0000                     l7665 0000                     l7681 0000  
                   l7673 0000                     l7833 0000                     l7817 0000  
                   l7809 0000                     l7921 0000                     l7913 0000  
                   l7905 0000                     l8385 0000                     l8377 0195  
                   l8369 018B                     l8289 0000                     l7667 0000  
                   l7659 0000                     l7683 0000                     l7675 0000  
                   l7771 0000                     l7851 0000                     l7819 0000  
                   l7931 0000                     l7923 0000                     l7915 0000  
                   l7907 0000                     l8387 0000                     l8379 0198  
                   l8299 0000                     l7669 0000                     l7685 0000  
                   l7677 0000                     l7781 0000                     l7861 020D  
                   l7845 0204                     l7941 0000                     l7933 0000  
                   l7925 0000                     l7917 0000                     l7909 0000  
                   l8389 0000                     l8397 0000                     l7679 0000  
                   l7791 0000                     l7863 0000                     l7855 0000  
                   l7847 01CB                     l7839 01CA                     l7943 0000  
                   l7935 0000                     l7927 0000                     l7919 0000  
                   l8399 04C5                     l7777 0000                     l7769 0000  
                   l7865 0000                     l7849 0206                     l7873 0000  
                   l7945 0000                     l7937 0000                     l7929 0000  
                   l7953 02A7                     l7961 02AE                     l7795 0000  
                   l7779 0253                     l7883 0000                     l7875 0000  
                   l7947 0000                     l7939 0000                     l7955 02A9  
                   l7963 02B9                     l7797 0283                     l7789 0266  
                   l7869 0000                     l7893 0000                     l7885 0000  
                   l7877 0000                     l7981 0000                     l7965 0000  
                   l7957 02AB                     l7949 0000                     l7799 0000  
                   l7887 0000                     l7895 0000                     l7983 0000  
                   l7975 02CA                     l7967 0000                     l7991 0000  
                   l7889 0000                     l7985 0000                     l7969 0000  
                   l7899 0000                     l7987 0000                     l7979 02BA  
                   l7995 0000                     l7989 0000                     u1005 04A4  
                   u1305 0278                     u1355 01E7                     u1365 01D8  
                   _TMR2 001A                     _Init 039F                     _main 04C2  
        __end_of_BTpower 045E                     fsr0h 0005                     fsr1h 0007  
                   fsr0l 0004                     indf0 0000                     fsr1l 0006  
                   btemp 007E                     start 0097          __end_of_GetHotV 04C2  
        __end_of_GetUsbI 040C                    ??_itr 0070                    ?_Init 0070  
        __end_of___aldiv 02A0                    ?_main 0070                    _ANSA0 0C60  
                  _ANSA1 0C61                    _ANSC1 0C71                    _ANSC2 0C72  
                  _T1CON 0018                    _T2CON 001C                    _IOCAF 0393  
                  _IOCAN 0392                    _IOCAP 0391                    _TMR1H 0017  
                  _TMR1L 0016                    _PORTA 000C                    _PORTC 000E  
                  _TRISA 008C                    _TRISC 008E                    _GetAD 01A6  
                  _GetBT 03C5                    _delay 049C                    _power 0378  
   __size_of_charge_deal 010D                    wtemp0 007E             __end_of_Init 03C5  
           __end_of_main 04CC                   ??_Init 0070                   ??_main 007E  
     __size_of_GetIsense 0014                   ?_GetAD 0070                   ?_GetBT 0034  
       __end_of_Variates 0315                   ?_delay 0070                   _ADCON0 009D  
                 _ADCON1 009E                   _ADRESH 009C                   _ADRESL 009B  
              ??_BTpower 007E                   ?_power 0070                   _ANSELA 018C  
                 _ANSELC 018E                   GetAD@i 0033                   GetAD@t 0032  
                 i1l6382 005D                   i1l6374 0040                   i1l6384 0078  
                 i1l6377 0051                   i1l6386 0076                   i1l6378 004F  
                 i1l6387 0074                   i1l7701 0000                   i1l7703 001F  
                 i1l7715 003D                   i1l7733 0000                   i1l7709 002E  
                 i1l7727 005E                   i1l7719 0042                   i1l7761 0087  
                 i1l7745 0000                   i1l7737 005F                   i1l7749 006B  
                 i1l7693 0000                   i1l7767 0000                   i1l7759 0000  
                 i1l7695 0000                   i1l7687 0000                   _INTCON 000B  
                 _HOTPWM 045E                   _OSCCON 0099                ??_GetHotV 0078  
                 _TMR1IE 0488                   _TMR1IF 0088                   _TMR2IF 0089  
                 _TMR1ON 00C0                ??_GetUsbI 007E                   _TMR2ON 00E2  
                 _TRISC3 0473                   _TRISC5 0475                   _USBPWM 0473  
              ??___aldiv 0078         __end_of_key_deal 034A                   delay@i 0072  
                 delay@t 0074                   clrloop 04D5                   power@i 0075  
      __end_of_GetIsense 049C         ??_powerInit_deal 0075            __end_of_GetAD 0221  
          __end_of_GetBT 03E9           __pcstackCOMMON 0070            __end_of_delay 04B0  
          __end_of_power 039F                  ??_GetAD 0072                  ??_GetBT 007E  
                ??_delay 0072                  ??_power 0075               __pbssBANK0 0046  
                ?_HOTPWM 0070                  ?_USBPWM 0070               __pmaintext 04C2  
              ?_Variates 0070               __pintentry 0004                  GetBT@BT 0036  
     __size_of_warn_deal 003E                  _PWM1DCH 0612                  _PWM1DCL 0611  
                _PWM2DCH 0615                  _PWM2DCL 0614                  _PWM1CON 0613  
                _PWM2CON 0616            charge_deal@BT 0040                  _VREGCON 0197  
                _BTpower 0444                  _GetHotV 04B0          __size_of_HOTPWM 0015  
              ?_key_deal 0070                  _GetUsbI 03E9          __size_of_USBPWM 0015  
                _TempVAD 0066               ??_Variates 0070                  ___aldiv 0234  
           __size_of_itr 0093         ___aldiv@dividend 0074            ??_charge_deal 007E  
   end_of_initialization 04D2               ??_key_deal 0076        __end_of_warn_deal 02DE  
              GetUsbI@BT 003A               _sleep_deal 034A         ___aldiv@quotient 007A  
             _smoke_deal 040C      __end_of_charge_deal 01A6           __end_of_HOTPWM 0473  
         __end_of_USBPWM 0488                _GetIsense 0488      start_initialization 04CC  
            __end_of_itr 0097                 ??_HOTPWM 0070                 ??_USBPWM 0070  
            ?_sleep_deal 0070               ?_GetIsense 0076          powerInit_deal@i 0075  
      __size_of_Variates 0037              ?_smoke_deal 0070            __pcstackBANK0 0020  
            _charge_deal 0099                 ?_BTpower 0070                 ?_GetHotV 0076  
               ?_GetUsbI 0038        __size_of_key_deal 0035                 ?___aldiv 0070  
              __ptext480 0378                __ptext472 0099                __ptext481 02A0  
              __ptext473 040C                __ptext490 049C                __ptext482 034A  
              __ptext474 0444                __ptext483 0428                __ptext475 03E9  
              __ptext484 01A6                __ptext476 0315                __ptext485 0234  
              __ptext477 0488                __ptext486 045E                __ptext478 03C5  
              __ptext487 0473                __ptext479 04B0                __ptext488 039F  
              __ptext489 02DE              GetAD@SumADC 0030              GetAD@SumBuf 0020  
__size_of_powerInit_deal 0013             charge_deal@I 0042             charge_deal@i 0044  
         __size_of_GetAD 007B           __size_of_GetBT 0024           __size_of_delay 0014  
    __size_of_sleep_deal 002E           __size_of_power 0027          ___aldiv@divisor 0070  
        ___aldiv@counter 0078                 GetHotV@H 0078      __size_of_smoke_deal 001C  
               GetUsbI@I 003E                 GetUsbI@V 003C              ??_GetIsense 0078  
              _warn_deal 02A0               _ADCON0bits 009D               warn_deal@i 0075  
       __size_of_BTpower 001A         __size_of_GetHotV 0012         __size_of_GetUsbI 0023  
               _Variates 02DE               ?_warn_deal 0070         __size_of___aldiv 006C  
          __size_of_Init 0026                 _key_deal 0315            __size_of_main 000A  
               delay@nms 0070                 clear_ram 04D4             ??_sleep_deal 0070  
         _powerInit_deal 0428             ??_smoke_deal 007E             ?_charge_deal 0070  
     __end_of_sleep_deal 0378                 intlevel1 0000               GetIsense@I 0078  
     __end_of_smoke_deal 0428   __end_of_powerInit_deal 043B              ??_warn_deal 0075  
      charge_deal@i_5379 0045             ___aldiv@sign 0079  
